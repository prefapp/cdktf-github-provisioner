"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionsOrganizationPermissions = exports.ActionsOrganizationPermissionsEnabledRepositoriesConfigOutputReference = exports.actionsOrganizationPermissionsEnabledRepositoriesConfigToTerraform = exports.ActionsOrganizationPermissionsAllowedActionsConfigOutputReference = exports.actionsOrganizationPermissionsAllowedActionsConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function actionsOrganizationPermissionsAllowedActionsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        github_owned_allowed: cdktf.booleanToTerraform(struct.githubOwnedAllowed),
        patterns_allowed: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.patternsAllowed),
        verified_allowed: cdktf.booleanToTerraform(struct.verifiedAllowed),
    };
}
exports.actionsOrganizationPermissionsAllowedActionsConfigToTerraform = actionsOrganizationPermissionsAllowedActionsConfigToTerraform;
class ActionsOrganizationPermissionsAllowedActionsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._githubOwnedAllowed !== undefined) {
            hasAnyValues = true;
            internalValueResult.githubOwnedAllowed = this._githubOwnedAllowed;
        }
        if (this._patternsAllowed !== undefined) {
            hasAnyValues = true;
            internalValueResult.patternsAllowed = this._patternsAllowed;
        }
        if (this._verifiedAllowed !== undefined) {
            hasAnyValues = true;
            internalValueResult.verifiedAllowed = this._verifiedAllowed;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._githubOwnedAllowed = undefined;
            this._patternsAllowed = undefined;
            this._verifiedAllowed = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._githubOwnedAllowed = value.githubOwnedAllowed;
            this._patternsAllowed = value.patternsAllowed;
            this._verifiedAllowed = value.verifiedAllowed;
        }
    }
    get githubOwnedAllowed() {
        return this.getBooleanAttribute('github_owned_allowed');
    }
    set githubOwnedAllowed(value) {
        this._githubOwnedAllowed = value;
    }
    // Temporarily expose input value. Use with caution.
    get githubOwnedAllowedInput() {
        return this._githubOwnedAllowed;
    }
    get patternsAllowed() {
        return cdktf.Fn.tolist(this.getListAttribute('patterns_allowed'));
    }
    set patternsAllowed(value) {
        this._patternsAllowed = value;
    }
    resetPatternsAllowed() {
        this._patternsAllowed = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patternsAllowedInput() {
        return this._patternsAllowed;
    }
    get verifiedAllowed() {
        return this.getBooleanAttribute('verified_allowed');
    }
    set verifiedAllowed(value) {
        this._verifiedAllowed = value;
    }
    resetVerifiedAllowed() {
        this._verifiedAllowed = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get verifiedAllowedInput() {
        return this._verifiedAllowed;
    }
}
exports.ActionsOrganizationPermissionsAllowedActionsConfigOutputReference = ActionsOrganizationPermissionsAllowedActionsConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ActionsOrganizationPermissionsAllowedActionsConfigOutputReference[_a] = { fqn: "@cdktf/provider-github.actionsOrganizationPermissions.ActionsOrganizationPermissionsAllowedActionsConfigOutputReference", version: "12.0.0" };
function actionsOrganizationPermissionsEnabledRepositoriesConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_ids: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.repositoryIds),
    };
}
exports.actionsOrganizationPermissionsEnabledRepositoriesConfigToTerraform = actionsOrganizationPermissionsEnabledRepositoriesConfigToTerraform;
class ActionsOrganizationPermissionsEnabledRepositoriesConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryIds = this._repositoryIds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repositoryIds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repositoryIds = value.repositoryIds;
        }
    }
    get repositoryIds() {
        return cdktf.Token.asNumberList(cdktf.Fn.tolist(this.getNumberListAttribute('repository_ids')));
    }
    set repositoryIds(value) {
        this._repositoryIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryIdsInput() {
        return this._repositoryIds;
    }
}
exports.ActionsOrganizationPermissionsEnabledRepositoriesConfigOutputReference = ActionsOrganizationPermissionsEnabledRepositoriesConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ActionsOrganizationPermissionsEnabledRepositoriesConfigOutputReference[_b] = { fqn: "@cdktf/provider-github.actionsOrganizationPermissions.ActionsOrganizationPermissionsEnabledRepositoriesConfigOutputReference", version: "12.0.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/actions_organization_permissions github_actions_organization_permissions}
*/
class ActionsOrganizationPermissions extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ActionsOrganizationPermissions resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ActionsOrganizationPermissions to import
    * @param importFromId The id of the existing ActionsOrganizationPermissions that should be imported. Refer to the {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/actions_organization_permissions#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ActionsOrganizationPermissions to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "github_actions_organization_permissions", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/actions_organization_permissions github_actions_organization_permissions} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ActionsOrganizationPermissionsConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'github_actions_organization_permissions',
            terraformGeneratorMetadata: {
                providerName: 'github',
                providerVersion: '5.40.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // allowed_actions_config - computed: false, optional: true, required: false
        this._allowedActionsConfig = new ActionsOrganizationPermissionsAllowedActionsConfigOutputReference(this, "allowed_actions_config");
        // enabled_repositories_config - computed: false, optional: true, required: false
        this._enabledRepositoriesConfig = new ActionsOrganizationPermissionsEnabledRepositoriesConfigOutputReference(this, "enabled_repositories_config");
        this._allowedActions = config.allowedActions;
        this._enabledRepositories = config.enabledRepositories;
        this._id = config.id;
        this._allowedActionsConfig.internalValue = config.allowedActionsConfig;
        this._enabledRepositoriesConfig.internalValue = config.enabledRepositoriesConfig;
    }
    get allowedActions() {
        return this.getStringAttribute('allowed_actions');
    }
    set allowedActions(value) {
        this._allowedActions = value;
    }
    resetAllowedActions() {
        this._allowedActions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedActionsInput() {
        return this._allowedActions;
    }
    get enabledRepositories() {
        return this.getStringAttribute('enabled_repositories');
    }
    set enabledRepositories(value) {
        this._enabledRepositories = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledRepositoriesInput() {
        return this._enabledRepositories;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get allowedActionsConfig() {
        return this._allowedActionsConfig;
    }
    putAllowedActionsConfig(value) {
        this._allowedActionsConfig.internalValue = value;
    }
    resetAllowedActionsConfig() {
        this._allowedActionsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedActionsConfigInput() {
        return this._allowedActionsConfig.internalValue;
    }
    get enabledRepositoriesConfig() {
        return this._enabledRepositoriesConfig;
    }
    putEnabledRepositoriesConfig(value) {
        this._enabledRepositoriesConfig.internalValue = value;
    }
    resetEnabledRepositoriesConfig() {
        this._enabledRepositoriesConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledRepositoriesConfigInput() {
        return this._enabledRepositoriesConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allowed_actions: cdktf.stringToTerraform(this._allowedActions),
            enabled_repositories: cdktf.stringToTerraform(this._enabledRepositories),
            id: cdktf.stringToTerraform(this._id),
            allowed_actions_config: actionsOrganizationPermissionsAllowedActionsConfigToTerraform(this._allowedActionsConfig.internalValue),
            enabled_repositories_config: actionsOrganizationPermissionsEnabledRepositoriesConfigToTerraform(this._enabledRepositoriesConfig.internalValue),
        };
    }
}
exports.ActionsOrganizationPermissions = ActionsOrganizationPermissions;
_c = JSII_RTTI_SYMBOL_1;
ActionsOrganizationPermissions[_c] = { fqn: "@cdktf/provider-github.actionsOrganizationPermissions.ActionsOrganizationPermissions", version: "12.0.0" };
// =================
// STATIC PROPERTIES
// =================
ActionsOrganizationPermissions.tfResourceType = "github_actions_organization_permissions";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWN0aW9ucy1vcmdhbml6YXRpb24tcGVybWlzc2lvbnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFTQSwrQkFBK0I7QUEwRC9CLFNBQWdCLDZEQUE2RCxDQUFDLE1BQStIO0lBQzNNLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQUUsT0FBTyxNQUFNLENBQUM7S0FBRTtJQUM1RixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNsQyxNQUFNLElBQUksS0FBSyxDQUFDLG9IQUFvSCxDQUFDLENBQUM7S0FDdkk7SUFDRCxPQUFPO1FBQ0wsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLGtCQUFrQixDQUFDLE1BQU8sQ0FBQyxrQkFBa0IsQ0FBQztRQUMxRSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQyxNQUFPLENBQUMsZUFBZSxDQUFDO1FBQzNGLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxNQUFPLENBQUMsZUFBZSxDQUFDO0tBQ3BFLENBQUE7QUFDSCxDQUFDO0FBVkQsc0lBVUM7QUFFRCxNQUFhLGlFQUFrRSxTQUFRLEtBQUssQ0FBQyxhQUFhO0lBR3hHOzs7TUFHRTtJQUNGLFlBQW1CLGlCQUE2QyxFQUFFLGtCQUEwQjtRQUMxRixLQUFLLENBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBUGpELGtCQUFhLEdBQUcsS0FBSyxDQUFDO0lBUTlCLENBQUM7SUFFRCxJQUFXLGFBQWE7UUFDdEIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztR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aHQgKGMpIEhhc2hpQ29ycCwgSW5jLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbiAqL1xuXG4vLyBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaW50ZWdyYXRpb25zL2dpdGh1Yi81LjQwLjAvZG9jcy9yZXNvdXJjZXMvYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnNcbi8vIGdlbmVyYXRlZCBmcm9tIHRlcnJhZm9ybSByZXNvdXJjZSBzY2hlbWFcblxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBjZGt0ZiBmcm9tICdjZGt0Zic7XG5cbi8vIENvbmZpZ3VyYXRpb25cblxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnNDb25maWcgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1NZXRhQXJndW1lbnRzIHtcbiAgLyoqXG4gICogVGhlIHBlcm1pc3Npb25zIHBvbGljeSB0aGF0IGNvbnRyb2xzIHRoZSBhY3Rpb25zIHRoYXQgYXJlIGFsbG93ZWQgdG8gcnVuLiBDYW4gYmUgb25lIG9mOiAnYWxsJywgJ2xvY2FsX29ubHknLCBvciAnc2VsZWN0ZWQnLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaW50ZWdyYXRpb25zL2dpdGh1Yi81LjQwLjAvZG9jcy9yZXNvdXJjZXMvYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnMjYWxsb3dlZF9hY3Rpb25zIEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9ucyNhbGxvd2VkX2FjdGlvbnN9XG4gICovXG4gIHJlYWRvbmx5IGFsbG93ZWRBY3Rpb25zPzogc3RyaW5nO1xuICAvKipcbiAgKiBUaGUgcG9saWN5IHRoYXQgY29udHJvbHMgdGhlIHJlcG9zaXRvcmllcyBpbiB0aGUgb3JnYW5pemF0aW9uIHRoYXQgYXJlIGFsbG93ZWQgdG8gcnVuIEdpdEh1YiBBY3Rpb25zLiBDYW4gYmUgb25lIG9mOiAnYWxsJywgJ25vbmUnLCBvciAnc2VsZWN0ZWQnLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaW50ZWdyYXRpb25zL2dpdGh1Yi81LjQwLjAvZG9jcy9yZXNvdXJjZXMvYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnMjZW5hYmxlZF9yZXBvc2l0b3JpZXMgQWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zI2VuYWJsZWRfcmVwb3NpdG9yaWVzfVxuICAqL1xuICByZWFkb25seSBlbmFibGVkUmVwb3NpdG9yaWVzOiBzdHJpbmc7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2ludGVncmF0aW9ucy9naXRodWIvNS40MC4wL2RvY3MvcmVzb3VyY2VzL2FjdGlvbnNfb3JnYW5pemF0aW9uX3Blcm1pc3Npb25zI2lkIEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9ucyNpZH1cbiAgKlxuICAqIFBsZWFzZSBiZSBhd2FyZSB0aGF0IHRoZSBpZCBmaWVsZCBpcyBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIGFsbCByZXNvdXJjZXMgaW4gVGVycmFmb3JtIHByb3ZpZGVycyB1c2luZyBhIFRlcnJhZm9ybSBwcm92aWRlciBTREsgdmVyc2lvbiBiZWxvdyAyLlxuICAqIElmIHlvdSBleHBlcmllbmNlIHByb2JsZW1zIHNldHRpbmcgdGhpcyB2YWx1ZSBpdCBtaWdodCBub3QgYmUgc2V0dGFibGUuIFBsZWFzZSB0YWtlIGEgbG9vayBhdCB0aGUgcHJvdmlkZXIgZG9jdW1lbnRhdGlvbiB0byBlbnN1cmUgaXQgc2hvdWxkIGJlIHNldHRhYmxlLlxuICAqL1xuICByZWFkb25seSBpZD86IHN0cmluZztcbiAgLyoqXG4gICogYWxsb3dlZF9hY3Rpb25zX2NvbmZpZyBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaW50ZWdyYXRpb25zL2dpdGh1Yi81LjQwLjAvZG9jcy9yZXNvdXJjZXMvYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnMjYWxsb3dlZF9hY3Rpb25zX2NvbmZpZyBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnMjYWxsb3dlZF9hY3Rpb25zX2NvbmZpZ31cbiAgKi9cbiAgcmVhZG9ubHkgYWxsb3dlZEFjdGlvbnNDb25maWc/OiBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnNBbGxvd2VkQWN0aW9uc0NvbmZpZztcbiAgLyoqXG4gICogZW5hYmxlZF9yZXBvc2l0b3JpZXNfY29uZmlnIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9pbnRlZ3JhdGlvbnMvZ2l0aHViLzUuNDAuMC9kb2NzL3Jlc291cmNlcy9hY3Rpb25zX29yZ2FuaXphdGlvbl9wZXJtaXNzaW9ucyNlbmFibGVkX3JlcG9zaXRvcmllc19jb25maWcgQWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zI2VuYWJsZWRfcmVwb3NpdG9yaWVzX2NvbmZpZ31cbiAgKi9cbiAgcmVhZG9ubHkgZW5hYmxlZFJlcG9zaXRvcmllc0NvbmZpZz86IEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9uc0VuYWJsZWRSZXBvc2l0b3JpZXNDb25maWc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9uc0FsbG93ZWRBY3Rpb25zQ29uZmlnIHtcbiAgLyoqXG4gICogV2hldGhlciBHaXRIdWItb3duZWQgYWN0aW9ucyBhcmUgYWxsb3dlZCBpbiB0aGUgb3JnYW5pemF0aW9uLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaW50ZWdyYXRpb25zL2dpdGh1Yi81LjQwLjAvZG9jcy9yZXNvdXJjZXMvYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnMjZ2l0aHViX293bmVkX2FsbG93ZWQgQWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zI2dpdGh1Yl9vd25lZF9hbGxvd2VkfVxuICAqL1xuICByZWFkb25seSBnaXRodWJPd25lZEFsbG93ZWQ6IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogU3BlY2lmaWVzIGEgbGlzdCBvZiBzdHJpbmctbWF0Y2hpbmcgcGF0dGVybnMgdG8gYWxsb3cgc3BlY2lmaWMgYWN0aW9uKHMpLiBXaWxkY2FyZHMsIHRhZ3MsIGFuZCBTSEFzIGFyZSBhbGxvd2VkLiBGb3IgZXhhbXBsZSwgJ21vbmFsaXNhL29jdG9jYXRAJywgJ21vbmFsaXNhL29jdG9jYXRAdjInLCAnbW9uYWxpc2EvJy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2ludGVncmF0aW9ucy9naXRodWIvNS40MC4wL2RvY3MvcmVzb3VyY2VzL2FjdGlvbnNfb3JnYW5pemF0aW9uX3Blcm1pc3Npb25zI3BhdHRlcm5zX2FsbG93ZWQgQWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zI3BhdHRlcm5zX2FsbG93ZWR9XG4gICovXG4gIHJlYWRvbmx5IHBhdHRlcm5zQWxsb3dlZD86IHN0cmluZ1tdO1xuICAvKipcbiAgKiBXaGV0aGVyIGFjdGlvbnMgaW4gR2l0SHViIE1hcmtldHBsYWNlIGZyb20gdmVyaWZpZWQgY3JlYXRvcnMgYXJlIGFsbG93ZWQuIFNldCB0byAndHJ1ZScgdG8gYWxsb3cgYWxsIEdpdEh1YiBNYXJrZXRwbGFjZSBhY3Rpb25zIGJ5IHZlcmlmaWVkIGNyZWF0b3JzLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaW50ZWdyYXRpb25zL2dpdGh1Yi81LjQwLjAvZG9jcy9yZXNvdXJjZXMvYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnMjdmVyaWZpZWRfYWxsb3dlZCBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnMjdmVyaWZpZWRfYWxsb3dlZH1cbiAgKi9cbiAgcmVhZG9ubHkgdmVyaWZpZWRBbGxvd2VkPzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zQWxsb3dlZEFjdGlvbnNDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnNBbGxvd2VkQWN0aW9uc0NvbmZpZ091dHB1dFJlZmVyZW5jZSB8IEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9uc0FsbG93ZWRBY3Rpb25zQ29uZmlnKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGdpdGh1Yl9vd25lZF9hbGxvd2VkOiBjZGt0Zi5ib29sZWFuVG9UZXJyYWZvcm0oc3RydWN0IS5naXRodWJPd25lZEFsbG93ZWQpLFxuICAgIHBhdHRlcm5zX2FsbG93ZWQ6IGNka3RmLmxpc3RNYXBwZXIoY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0sIGZhbHNlKShzdHJ1Y3QhLnBhdHRlcm5zQWxsb3dlZCksXG4gICAgdmVyaWZpZWRfYWxsb3dlZDogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEudmVyaWZpZWRBbGxvd2VkKSxcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zQWxsb3dlZEFjdGlvbnNDb25maWdPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9uc0FsbG93ZWRBY3Rpb25zQ29uZmlnIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9naXRodWJPd25lZEFsbG93ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZ2l0aHViT3duZWRBbGxvd2VkID0gdGhpcy5fZ2l0aHViT3duZWRBbGxvd2VkO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcGF0dGVybnNBbGxvd2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnBhdHRlcm5zQWxsb3dlZCA9IHRoaXMuX3BhdHRlcm5zQWxsb3dlZDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3ZlcmlmaWVkQWxsb3dlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC52ZXJpZmllZEFsbG93ZWQgPSB0aGlzLl92ZXJpZmllZEFsbG93ZWQ7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnNBbGxvd2VkQWN0aW9uc0NvbmZpZyB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2dpdGh1Yk93bmVkQWxsb3dlZCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3BhdHRlcm5zQWxsb3dlZCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3ZlcmlmaWVkQWxsb3dlZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fZ2l0aHViT3duZWRBbGxvd2VkID0gdmFsdWUuZ2l0aHViT3duZWRBbGxvd2VkO1xuICAgICAgdGhpcy5fcGF0dGVybnNBbGxvd2VkID0gdmFsdWUucGF0dGVybnNBbGxvd2VkO1xuICAgICAgdGhpcy5fdmVyaWZpZWRBbGxvd2VkID0gdmFsdWUudmVyaWZpZWRBbGxvd2VkO1xuICAgIH1cbiAgfVxuXG4gIC8vIGdpdGh1Yl9vd25lZF9hbGxvd2VkIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX2dpdGh1Yk93bmVkQWxsb3dlZD86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTsgXG4gIHB1YmxpYyBnZXQgZ2l0aHViT3duZWRBbGxvd2VkKCkge1xuICAgIHJldHVybiB0aGlzLmdldEJvb2xlYW5BdHRyaWJ1dGUoJ2dpdGh1Yl9vd25lZF9hbGxvd2VkJyk7XG4gIH1cbiAgcHVibGljIHNldCBnaXRodWJPd25lZEFsbG93ZWQodmFsdWU6IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZSkge1xuICAgIHRoaXMuX2dpdGh1Yk93bmVkQWxsb3dlZCA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBnaXRodWJPd25lZEFsbG93ZWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2l0aHViT3duZWRBbGxvd2VkO1xuICB9XG5cbiAgLy8gcGF0dGVybnNfYWxsb3dlZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9wYXR0ZXJuc0FsbG93ZWQ/OiBzdHJpbmdbXTsgXG4gIHB1YmxpYyBnZXQgcGF0dGVybnNBbGxvd2VkKCkge1xuICAgIHJldHVybiBjZGt0Zi5Gbi50b2xpc3QodGhpcy5nZXRMaXN0QXR0cmlidXRlKCdwYXR0ZXJuc19hbGxvd2VkJykpO1xuICB9XG4gIHB1YmxpYyBzZXQgcGF0dGVybnNBbGxvd2VkKHZhbHVlOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuX3BhdHRlcm5zQWxsb3dlZCA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFBhdHRlcm5zQWxsb3dlZCgpIHtcbiAgICB0aGlzLl9wYXR0ZXJuc0FsbG93ZWQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHBhdHRlcm5zQWxsb3dlZElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9wYXR0ZXJuc0FsbG93ZWQ7XG4gIH1cblxuICAvLyB2ZXJpZmllZF9hbGxvd2VkIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3ZlcmlmaWVkQWxsb3dlZD86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTsgXG4gIHB1YmxpYyBnZXQgdmVyaWZpZWRBbGxvd2VkKCkge1xuICAgIHJldHVybiB0aGlzLmdldEJvb2xlYW5BdHRyaWJ1dGUoJ3ZlcmlmaWVkX2FsbG93ZWQnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHZlcmlmaWVkQWxsb3dlZCh2YWx1ZTogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlKSB7XG4gICAgdGhpcy5fdmVyaWZpZWRBbGxvd2VkID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0VmVyaWZpZWRBbGxvd2VkKCkge1xuICAgIHRoaXMuX3ZlcmlmaWVkQWxsb3dlZCA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdmVyaWZpZWRBbGxvd2VkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZlcmlmaWVkQWxsb3dlZDtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnNFbmFibGVkUmVwb3NpdG9yaWVzQ29uZmlnIHtcbiAgLyoqXG4gICogTGlzdCBvZiByZXBvc2l0b3J5IElEcyB0byBlbmFibGUgZm9yIEdpdEh1YiBBY3Rpb25zLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaW50ZWdyYXRpb25zL2dpdGh1Yi81LjQwLjAvZG9jcy9yZXNvdXJjZXMvYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnMjcmVwb3NpdG9yeV9pZHMgQWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zI3JlcG9zaXRvcnlfaWRzfVxuICAqL1xuICByZWFkb25seSByZXBvc2l0b3J5SWRzOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9uc0VuYWJsZWRSZXBvc2l0b3JpZXNDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnNFbmFibGVkUmVwb3NpdG9yaWVzQ29uZmlnT3V0cHV0UmVmZXJlbmNlIHwgQWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zRW5hYmxlZFJlcG9zaXRvcmllc0NvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZXBvc2l0b3J5X2lkczogY2RrdGYubGlzdE1hcHBlcihjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybSwgZmFsc2UpKHN0cnVjdCEucmVwb3NpdG9yeUlkcyksXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9uc0VuYWJsZWRSZXBvc2l0b3JpZXNDb25maWdPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9uc0VuYWJsZWRSZXBvc2l0b3JpZXNDb25maWcgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX3JlcG9zaXRvcnlJZHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQucmVwb3NpdG9yeUlkcyA9IHRoaXMuX3JlcG9zaXRvcnlJZHM7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnNFbmFibGVkUmVwb3NpdG9yaWVzQ29uZmlnIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcmVwb3NpdG9yeUlkcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fcmVwb3NpdG9yeUlkcyA9IHZhbHVlLnJlcG9zaXRvcnlJZHM7XG4gICAgfVxuICB9XG5cbiAgLy8gcmVwb3NpdG9yeV9pZHMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfcmVwb3NpdG9yeUlkcz86IG51bWJlcltdOyBcbiAgcHVibGljIGdldCByZXBvc2l0b3J5SWRzKCkge1xuICAgIHJldHVybiBjZGt0Zi5Ub2tlbi5hc051bWJlckxpc3QoY2RrdGYuRm4udG9saXN0KHRoaXMuZ2V0TnVtYmVyTGlzdEF0dHJpYnV0ZSgncmVwb3NpdG9yeV9pZHMnKSkpO1xuICB9XG4gIHB1YmxpYyBzZXQgcmVwb3NpdG9yeUlkcyh2YWx1ZTogbnVtYmVyW10pIHtcbiAgICB0aGlzLl9yZXBvc2l0b3J5SWRzID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHJlcG9zaXRvcnlJZHNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVwb3NpdG9yeUlkcztcbiAgfVxufVxuXG4vKipcbiogUmVwcmVzZW50cyBhIHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaW50ZWdyYXRpb25zL2dpdGh1Yi81LjQwLjAvZG9jcy9yZXNvdXJjZXMvYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnMgZ2l0aHViX2FjdGlvbnNfb3JnYW5pemF0aW9uX3Blcm1pc3Npb25zfVxuKi9cbmV4cG9ydCBjbGFzcyBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnMgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1SZXNvdXJjZSB7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIFBST1BFUlRJRVNcbiAgLy8gPT09PT09PT09PT09PT09PT1cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB0ZlJlc291cmNlVHlwZSA9IFwiZ2l0aHViX2FjdGlvbnNfb3JnYW5pemF0aW9uX3Blcm1pc3Npb25zXCI7XG5cbiAgLy8gPT09PT09PT09PT09PT1cbiAgLy8gU1RBVElDIE1ldGhvZHNcbiAgLy8gPT09PT09PT09PT09PT1cbiAgLyoqXG4gICogR2VuZXJhdGVzIENES1RGIGNvZGUgZm9yIGltcG9ydGluZyBhIEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9ucyByZXNvdXJjZSB1cG9uIHJ1bm5pbmcgXCJjZGt0ZiBwbGFuIDxzdGFjay1uYW1lPlwiXG4gICogQHBhcmFtIHNjb3BlIFRoZSBzY29wZSBpbiB3aGljaCB0byBkZWZpbmUgdGhpcyBjb25zdHJ1Y3RcbiAgKiBAcGFyYW0gaW1wb3J0VG9JZCBUaGUgY29uc3RydWN0IGlkIHVzZWQgaW4gdGhlIGdlbmVyYXRlZCBjb25maWcgZm9yIHRoZSBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnMgdG8gaW1wb3J0XG4gICogQHBhcmFtIGltcG9ydEZyb21JZCBUaGUgaWQgb2YgdGhlIGV4aXN0aW5nIEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9ucyB0aGF0IHNob3VsZCBiZSBpbXBvcnRlZC4gUmVmZXIgdG8gdGhlIHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaW50ZWdyYXRpb25zL2dpdGh1Yi81LjQwLjAvZG9jcy9yZXNvdXJjZXMvYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnMjaW1wb3J0IGltcG9ydCBzZWN0aW9ufSBpbiB0aGUgZG9jdW1lbnRhdGlvbiBvZiB0aGlzIHJlc291cmNlIGZvciB0aGUgaWQgdG8gdXNlXG4gICogQHBhcmFtIHByb3ZpZGVyPyBPcHRpb25hbCBpbnN0YW5jZSBvZiB0aGUgcHJvdmlkZXIgd2hlcmUgdGhlIEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9ucyB0byBpbXBvcnQgaXMgZm91bmRcbiAgKi9cbiAgcHVibGljIHN0YXRpYyBnZW5lcmF0ZUNvbmZpZ0ZvckltcG9ydChzY29wZTogQ29uc3RydWN0LCBpbXBvcnRUb0lkOiBzdHJpbmcsIGltcG9ydEZyb21JZDogc3RyaW5nLCBwcm92aWRlcj86IGNka3RmLlRlcnJhZm9ybVByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgY2RrdGYuSW1wb3J0YWJsZVJlc291cmNlKHNjb3BlLCBpbXBvcnRUb0lkLCB7IHRlcnJhZm9ybVJlc291cmNlVHlwZTogXCJnaXRodWJfYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnNcIiwgaW1wb3J0SWQ6IGltcG9ydEZyb21JZCwgcHJvdmlkZXIgfSk7XG4gICAgICB9XG5cbiAgLy8gPT09PT09PT09PT1cbiAgLy8gSU5JVElBTElaRVJcbiAgLy8gPT09PT09PT09PT1cblxuICAvKipcbiAgKiBDcmVhdGUgYSBuZXcge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9pbnRlZ3JhdGlvbnMvZ2l0aHViLzUuNDAuMC9kb2NzL3Jlc291cmNlcy9hY3Rpb25zX29yZ2FuaXphdGlvbl9wZXJtaXNzaW9ucyBnaXRodWJfYWN0aW9uc19vcmdhbml6YXRpb25fcGVybWlzc2lvbnN9IFJlc291cmNlXG4gICpcbiAgKiBAcGFyYW0gc2NvcGUgVGhlIHNjb3BlIGluIHdoaWNoIHRvIGRlZmluZSB0aGlzIGNvbnN0cnVjdFxuICAqIEBwYXJhbSBpZCBUaGUgc2NvcGVkIGNvbnN0cnVjdCBJRC4gTXVzdCBiZSB1bmlxdWUgYW1vbmdzdCBzaWJsaW5ncyBpbiB0aGUgc2FtZSBzY29wZVxuICAqIEBwYXJhbSBvcHRpb25zIEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9uc0NvbmZpZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgY29uZmlnOiBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnNDb25maWcpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHRlcnJhZm9ybVJlc291cmNlVHlwZTogJ2dpdGh1Yl9hY3Rpb25zX29yZ2FuaXphdGlvbl9wZXJtaXNzaW9ucycsXG4gICAgICB0ZXJyYWZvcm1HZW5lcmF0b3JNZXRhZGF0YToge1xuICAgICAgICBwcm92aWRlck5hbWU6ICdnaXRodWInLFxuICAgICAgICBwcm92aWRlclZlcnNpb246ICc1LjQwLjAnLFxuICAgICAgICBwcm92aWRlclZlcnNpb25Db25zdHJhaW50OiAnfj4gNS4wJ1xuICAgICAgfSxcbiAgICAgIHByb3ZpZGVyOiBjb25maWcucHJvdmlkZXIsXG4gICAgICBkZXBlbmRzT246IGNvbmZpZy5kZXBlbmRzT24sXG4gICAgICBjb3VudDogY29uZmlnLmNvdW50LFxuICAgICAgbGlmZWN5Y2xlOiBjb25maWcubGlmZWN5Y2xlLFxuICAgICAgcHJvdmlzaW9uZXJzOiBjb25maWcucHJvdmlzaW9uZXJzLFxuICAgICAgY29ubmVjdGlvbjogY29uZmlnLmNvbm5lY3Rpb24sXG4gICAgICBmb3JFYWNoOiBjb25maWcuZm9yRWFjaFxuICAgIH0pO1xuICAgIHRoaXMuX2FsbG93ZWRBY3Rpb25zID0gY29uZmlnLmFsbG93ZWRBY3Rpb25zO1xuICAgIHRoaXMuX2VuYWJsZWRSZXBvc2l0b3JpZXMgPSBjb25maWcuZW5hYmxlZFJlcG9zaXRvcmllcztcbiAgICB0aGlzLl9pZCA9IGNvbmZpZy5pZDtcbiAgICB0aGlzLl9hbGxvd2VkQWN0aW9uc0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gY29uZmlnLmFsbG93ZWRBY3Rpb25zQ29uZmlnO1xuICAgIHRoaXMuX2VuYWJsZWRSZXBvc2l0b3JpZXNDb25maWcuaW50ZXJuYWxWYWx1ZSA9IGNvbmZpZy5lbmFibGVkUmVwb3NpdG9yaWVzQ29uZmlnO1xuICB9XG5cbiAgLy8gPT09PT09PT09PVxuICAvLyBBVFRSSUJVVEVTXG4gIC8vID09PT09PT09PT1cblxuICAvLyBhbGxvd2VkX2FjdGlvbnMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfYWxsb3dlZEFjdGlvbnM/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGFsbG93ZWRBY3Rpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnYWxsb3dlZF9hY3Rpb25zJyk7XG4gIH1cbiAgcHVibGljIHNldCBhbGxvd2VkQWN0aW9ucyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fYWxsb3dlZEFjdGlvbnMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRBbGxvd2VkQWN0aW9ucygpIHtcbiAgICB0aGlzLl9hbGxvd2VkQWN0aW9ucyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgYWxsb3dlZEFjdGlvbnNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWxsb3dlZEFjdGlvbnM7XG4gIH1cblxuICAvLyBlbmFibGVkX3JlcG9zaXRvcmllcyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9lbmFibGVkUmVwb3NpdG9yaWVzPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBlbmFibGVkUmVwb3NpdG9yaWVzKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnZW5hYmxlZF9yZXBvc2l0b3JpZXMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGVuYWJsZWRSZXBvc2l0b3JpZXModmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2VuYWJsZWRSZXBvc2l0b3JpZXMgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZW5hYmxlZFJlcG9zaXRvcmllc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9lbmFibGVkUmVwb3NpdG9yaWVzO1xuICB9XG5cbiAgLy8gaWQgLSBjb21wdXRlZDogdHJ1ZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9pZD86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdpZCcpO1xuICB9XG4gIHB1YmxpYyBzZXQgaWQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2lkID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0SWQoKSB7XG4gICAgdGhpcy5faWQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGlkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG5cbiAgLy8gYWxsb3dlZF9hY3Rpb25zX2NvbmZpZyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9hbGxvd2VkQWN0aW9uc0NvbmZpZyA9IG5ldyBBY3Rpb25zT3JnYW5pemF0aW9uUGVybWlzc2lvbnNBbGxvd2VkQWN0aW9uc0NvbmZpZ091dHB1dFJlZmVyZW5jZSh0aGlzLCBcImFsbG93ZWRfYWN0aW9uc19jb25maWdcIik7XG4gIHB1YmxpYyBnZXQgYWxsb3dlZEFjdGlvbnNDb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FsbG93ZWRBY3Rpb25zQ29uZmlnO1xuICB9XG4gIHB1YmxpYyBwdXRBbGxvd2VkQWN0aW9uc0NvbmZpZyh2YWx1ZTogQWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zQWxsb3dlZEFjdGlvbnNDb25maWcpIHtcbiAgICB0aGlzLl9hbGxvd2VkQWN0aW9uc0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0QWxsb3dlZEFjdGlvbnNDb25maWcoKSB7XG4gICAgdGhpcy5fYWxsb3dlZEFjdGlvbnNDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgYWxsb3dlZEFjdGlvbnNDb25maWdJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWxsb3dlZEFjdGlvbnNDb25maWcuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIGVuYWJsZWRfcmVwb3NpdG9yaWVzX2NvbmZpZyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9lbmFibGVkUmVwb3NpdG9yaWVzQ29uZmlnID0gbmV3IEFjdGlvbnNPcmdhbml6YXRpb25QZXJtaXNzaW9uc0VuYWJsZWRSZXBvc2l0b3JpZXNDb25maWdPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJlbmFibGVkX3JlcG9zaXRvcmllc19jb25maWdcIik7XG4gIHB1YmxpYyBnZXQgZW5hYmxlZFJlcG9zaXRvcmllc0NvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5fZW5hYmxlZFJlcG9zaXRvcmllc0NvbmZpZztcbiAgfVxuICBwdWJsaWMgcHV0RW5hYmxlZFJlcG9zaXRvcmllc0NvbmZpZyh2YWx1ZTogQWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zRW5hYmxlZFJlcG9zaXRvcmllc0NvbmZpZykge1xuICAgIHRoaXMuX2VuYWJsZWRSZXBvc2l0b3JpZXNDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEVuYWJsZWRSZXBvc2l0b3JpZXNDb25maWcoKSB7XG4gICAgdGhpcy5fZW5hYmxlZFJlcG9zaXRvcmllc0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBlbmFibGVkUmVwb3NpdG9yaWVzQ29uZmlnSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VuYWJsZWRSZXBvc2l0b3JpZXNDb25maWcuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vID09PT09PT09PVxuICAvLyBTWU5USEVTSVNcbiAgLy8gPT09PT09PT09XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgYWxsb3dlZF9hY3Rpb25zOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSh0aGlzLl9hbGxvd2VkQWN0aW9ucyksXG4gICAgICBlbmFibGVkX3JlcG9zaXRvcmllczogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5fZW5hYmxlZFJlcG9zaXRvcmllcyksXG4gICAgICBpZDogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0odGhpcy5faWQpLFxuICAgICAgYWxsb3dlZF9hY3Rpb25zX2NvbmZpZzogYWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zQWxsb3dlZEFjdGlvbnNDb25maWdUb1RlcnJhZm9ybSh0aGlzLl9hbGxvd2VkQWN0aW9uc0NvbmZpZy5pbnRlcm5hbFZhbHVlKSxcbiAgICAgIGVuYWJsZWRfcmVwb3NpdG9yaWVzX2NvbmZpZzogYWN0aW9uc09yZ2FuaXphdGlvblBlcm1pc3Npb25zRW5hYmxlZFJlcG9zaXRvcmllc0NvbmZpZ1RvVGVycmFmb3JtKHRoaXMuX2VuYWJsZWRSZXBvc2l0b3JpZXNDb25maWcuaW50ZXJuYWxWYWx1ZSksXG4gICAgfTtcbiAgfVxufVxuIl19