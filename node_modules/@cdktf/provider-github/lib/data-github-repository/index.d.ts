/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface DataGithubRepositoryConfig extends cdktf.TerraformMetaArguments {
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/repository#description DataGithubRepository#description}
    */
    readonly description?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/repository#full_name DataGithubRepository#full_name}
    */
    readonly fullName?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/repository#homepage_url DataGithubRepository#homepage_url}
    */
    readonly homepageUrl?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/repository#id DataGithubRepository#id}
    *
    * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
    * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
    */
    readonly id?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/repository#name DataGithubRepository#name}
    */
    readonly name?: string;
}
export interface DataGithubRepositoryPagesSource {
}
export declare function dataGithubRepositoryPagesSourceToTerraform(struct?: DataGithubRepositoryPagesSource): any;
export declare class DataGithubRepositoryPagesSourceOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): DataGithubRepositoryPagesSource | undefined;
    set internalValue(value: DataGithubRepositoryPagesSource | undefined);
    get branch(): string;
    get path(): string;
}
export declare class DataGithubRepositoryPagesSourceList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): DataGithubRepositoryPagesSourceOutputReference;
}
export interface DataGithubRepositoryPages {
}
export declare function dataGithubRepositoryPagesToTerraform(struct?: DataGithubRepositoryPages): any;
export declare class DataGithubRepositoryPagesOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): DataGithubRepositoryPages | undefined;
    set internalValue(value: DataGithubRepositoryPages | undefined);
    get buildType(): string;
    get cname(): string;
    get custom404(): cdktf.IResolvable;
    get htmlUrl(): string;
    private _source;
    get source(): DataGithubRepositoryPagesSourceList;
    get status(): string;
    get url(): string;
}
export declare class DataGithubRepositoryPagesList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): DataGithubRepositoryPagesOutputReference;
}
export interface DataGithubRepositoryTemplate {
}
export declare function dataGithubRepositoryTemplateToTerraform(struct?: DataGithubRepositoryTemplate): any;
export declare class DataGithubRepositoryTemplateOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): DataGithubRepositoryTemplate | undefined;
    set internalValue(value: DataGithubRepositoryTemplate | undefined);
    get owner(): string;
    get repository(): string;
}
export declare class DataGithubRepositoryTemplateList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): DataGithubRepositoryTemplateOutputReference;
}
/**
* Represents a {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/repository github_repository}
*/
export declare class DataGithubRepository extends cdktf.TerraformDataSource {
    static readonly tfResourceType = "github_repository";
    /**
    * Generates CDKTF code for importing a DataGithubRepository resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataGithubRepository to import
    * @param importFromId The id of the existing DataGithubRepository that should be imported. Refer to the {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/repository#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataGithubRepository to import is found
    */
    static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider): cdktf.ImportableResource;
    /**
    * Create a new {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/repository github_repository} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataGithubRepositoryConfig = {}
    */
    constructor(scope: Construct, id: string, config?: DataGithubRepositoryConfig);
    get allowAutoMerge(): cdktf.IResolvable;
    get allowMergeCommit(): cdktf.IResolvable;
    get allowRebaseMerge(): cdktf.IResolvable;
    get allowSquashMerge(): cdktf.IResolvable;
    get archived(): cdktf.IResolvable;
    get defaultBranch(): string;
    private _description?;
    get description(): string;
    set description(value: string);
    resetDescription(): void;
    get descriptionInput(): string | undefined;
    get fork(): cdktf.IResolvable;
    private _fullName?;
    get fullName(): string;
    set fullName(value: string);
    resetFullName(): void;
    get fullNameInput(): string | undefined;
    get gitCloneUrl(): string;
    get hasDiscussions(): cdktf.IResolvable;
    get hasDownloads(): cdktf.IResolvable;
    get hasIssues(): cdktf.IResolvable;
    get hasProjects(): cdktf.IResolvable;
    get hasWiki(): cdktf.IResolvable;
    private _homepageUrl?;
    get homepageUrl(): string;
    set homepageUrl(value: string);
    resetHomepageUrl(): void;
    get homepageUrlInput(): string | undefined;
    get htmlUrl(): string;
    get httpCloneUrl(): string;
    private _id?;
    get id(): string;
    set id(value: string);
    resetId(): void;
    get idInput(): string | undefined;
    get isTemplate(): cdktf.IResolvable;
    get mergeCommitMessage(): string;
    get mergeCommitTitle(): string;
    private _name?;
    get name(): string;
    set name(value: string);
    resetName(): void;
    get nameInput(): string | undefined;
    get nodeId(): string;
    private _pages;
    get pages(): DataGithubRepositoryPagesList;
    get primaryLanguage(): string;
    get private(): cdktf.IResolvable;
    get repoId(): number;
    get squashMergeCommitMessage(): string;
    get squashMergeCommitTitle(): string;
    get sshCloneUrl(): string;
    get svnUrl(): string;
    private _template;
    get template(): DataGithubRepositoryTemplateList;
    get topics(): string[];
    get visibility(): string;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
