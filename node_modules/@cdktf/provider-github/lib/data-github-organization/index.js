"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataGithubOrganization = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/organization github_organization}
*/
class DataGithubOrganization extends cdktf.TerraformDataSource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataGithubOrganization resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataGithubOrganization to import
    * @param importFromId The id of the existing DataGithubOrganization that should be imported. Refer to the {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/organization#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataGithubOrganization to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "github_organization", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/data-sources/organization github_organization} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataGithubOrganizationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'github_organization',
            terraformGeneratorMetadata: {
                providerName: 'github',
                providerVersion: '5.40.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // users - computed: true, optional: false, required: false
        this._users = new cdktf.StringMapList(this, "users", false);
        this._id = config.id;
        this._name = config.name;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // advanced_security_enabled_for_new_repositories - computed: true, optional: false, required: false
    get advancedSecurityEnabledForNewRepositories() {
        return this.getBooleanAttribute('advanced_security_enabled_for_new_repositories');
    }
    // default_repository_permission - computed: true, optional: false, required: false
    get defaultRepositoryPermission() {
        return this.getStringAttribute('default_repository_permission');
    }
    // dependabot_alerts_enabled_for_new_repositories - computed: true, optional: false, required: false
    get dependabotAlertsEnabledForNewRepositories() {
        return this.getBooleanAttribute('dependabot_alerts_enabled_for_new_repositories');
    }
    // dependabot_security_updates_enabled_for_new_repositories - computed: true, optional: false, required: false
    get dependabotSecurityUpdatesEnabledForNewRepositories() {
        return this.getBooleanAttribute('dependabot_security_updates_enabled_for_new_repositories');
    }
    // dependency_graph_enabled_for_new_repositories - computed: true, optional: false, required: false
    get dependencyGraphEnabledForNewRepositories() {
        return this.getBooleanAttribute('dependency_graph_enabled_for_new_repositories');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // login - computed: true, optional: false, required: false
    get login() {
        return this.getStringAttribute('login');
    }
    // members - computed: true, optional: false, required: false
    get members() {
        return this.getListAttribute('members');
    }
    // members_allowed_repository_creation_type - computed: true, optional: false, required: false
    get membersAllowedRepositoryCreationType() {
        return this.getStringAttribute('members_allowed_repository_creation_type');
    }
    // members_can_create_internal_repositories - computed: true, optional: false, required: false
    get membersCanCreateInternalRepositories() {
        return this.getBooleanAttribute('members_can_create_internal_repositories');
    }
    // members_can_create_pages - computed: true, optional: false, required: false
    get membersCanCreatePages() {
        return this.getBooleanAttribute('members_can_create_pages');
    }
    // members_can_create_private_pages - computed: true, optional: false, required: false
    get membersCanCreatePrivatePages() {
        return this.getBooleanAttribute('members_can_create_private_pages');
    }
    // members_can_create_private_repositories - computed: true, optional: false, required: false
    get membersCanCreatePrivateRepositories() {
        return this.getBooleanAttribute('members_can_create_private_repositories');
    }
    // members_can_create_public_pages - computed: true, optional: false, required: false
    get membersCanCreatePublicPages() {
        return this.getBooleanAttribute('members_can_create_public_pages');
    }
    // members_can_create_public_repositories - computed: true, optional: false, required: false
    get membersCanCreatePublicRepositories() {
        return this.getBooleanAttribute('members_can_create_public_repositories');
    }
    // members_can_create_repositories - computed: true, optional: false, required: false
    get membersCanCreateRepositories() {
        return this.getBooleanAttribute('members_can_create_repositories');
    }
    // members_can_fork_private_repositories - computed: true, optional: false, required: false
    get membersCanForkPrivateRepositories() {
        return this.getBooleanAttribute('members_can_fork_private_repositories');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // node_id - computed: true, optional: false, required: false
    get nodeId() {
        return this.getStringAttribute('node_id');
    }
    // orgname - computed: true, optional: false, required: false
    get orgname() {
        return this.getStringAttribute('orgname');
    }
    // plan - computed: true, optional: false, required: false
    get plan() {
        return this.getStringAttribute('plan');
    }
    // repositories - computed: true, optional: false, required: false
    get repositories() {
        return this.getListAttribute('repositories');
    }
    // secret_scanning_enabled_for_new_repositories - computed: true, optional: false, required: false
    get secretScanningEnabledForNewRepositories() {
        return this.getBooleanAttribute('secret_scanning_enabled_for_new_repositories');
    }
    // secret_scanning_push_protection_enabled_for_new_repositories - computed: true, optional: false, required: false
    get secretScanningPushProtectionEnabledForNewRepositories() {
        return this.getBooleanAttribute('secret_scanning_push_protection_enabled_for_new_repositories');
    }
    // two_factor_requirement_enabled - computed: true, optional: false, required: false
    get twoFactorRequirementEnabled() {
        return this.getBooleanAttribute('two_factor_requirement_enabled');
    }
    get users() {
        return this._users;
    }
    // web_commit_signoff_required - computed: true, optional: false, required: false
    get webCommitSignoffRequired() {
        return this.getBooleanAttribute('web_commit_signoff_required');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
        };
    }
}
exports.DataGithubOrganization = DataGithubOrganization;
_a = JSII_RTTI_SYMBOL_1;
DataGithubOrganization[_a] = { fqn: "@cdktf/provider-github.dataGithubOrganization.DataGithubOrganization", version: "12.0.0" };
// =================
// STATIC PROPERTIES
// =================
DataGithubOrganization.tfResourceType = "github_organization";
//# sourceMappingURL=data:application/json;base64,