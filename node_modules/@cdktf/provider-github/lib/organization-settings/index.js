"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSettings = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/organization_settings github_organization_settings}
*/
class OrganizationSettings extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a OrganizationSettings resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the OrganizationSettings to import
    * @param importFromId The id of the existing OrganizationSettings that should be imported. Refer to the {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/organization_settings#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the OrganizationSettings to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "github_organization_settings", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/organization_settings github_organization_settings} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options OrganizationSettingsConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'github_organization_settings',
            terraformGeneratorMetadata: {
                providerName: 'github',
                providerVersion: '5.40.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._advancedSecurityEnabledForNewRepositories = config.advancedSecurityEnabledForNewRepositories;
        this._billingEmail = config.billingEmail;
        this._blog = config.blog;
        this._company = config.company;
        this._defaultRepositoryPermission = config.defaultRepositoryPermission;
        this._dependabotAlertsEnabledForNewRepositories = config.dependabotAlertsEnabledForNewRepositories;
        this._dependabotSecurityUpdatesEnabledForNewRepositories = config.dependabotSecurityUpdatesEnabledForNewRepositories;
        this._dependencyGraphEnabledForNewRepositories = config.dependencyGraphEnabledForNewRepositories;
        this._description = config.description;
        this._email = config.email;
        this._hasOrganizationProjects = config.hasOrganizationProjects;
        this._hasRepositoryProjects = config.hasRepositoryProjects;
        this._id = config.id;
        this._location = config.location;
        this._membersCanCreateInternalRepositories = config.membersCanCreateInternalRepositories;
        this._membersCanCreatePages = config.membersCanCreatePages;
        this._membersCanCreatePrivatePages = config.membersCanCreatePrivatePages;
        this._membersCanCreatePrivateRepositories = config.membersCanCreatePrivateRepositories;
        this._membersCanCreatePublicPages = config.membersCanCreatePublicPages;
        this._membersCanCreatePublicRepositories = config.membersCanCreatePublicRepositories;
        this._membersCanCreateRepositories = config.membersCanCreateRepositories;
        this._membersCanForkPrivateRepositories = config.membersCanForkPrivateRepositories;
        this._name = config.name;
        this._secretScanningEnabledForNewRepositories = config.secretScanningEnabledForNewRepositories;
        this._secretScanningPushProtectionEnabledForNewRepositories = config.secretScanningPushProtectionEnabledForNewRepositories;
        this._twitterUsername = config.twitterUsername;
        this._webCommitSignoffRequired = config.webCommitSignoffRequired;
    }
    get advancedSecurityEnabledForNewRepositories() {
        return this.getBooleanAttribute('advanced_security_enabled_for_new_repositories');
    }
    set advancedSecurityEnabledForNewRepositories(value) {
        this._advancedSecurityEnabledForNewRepositories = value;
    }
    resetAdvancedSecurityEnabledForNewRepositories() {
        this._advancedSecurityEnabledForNewRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get advancedSecurityEnabledForNewRepositoriesInput() {
        return this._advancedSecurityEnabledForNewRepositories;
    }
    get billingEmail() {
        return this.getStringAttribute('billing_email');
    }
    set billingEmail(value) {
        this._billingEmail = value;
    }
    // Temporarily expose input value. Use with caution.
    get billingEmailInput() {
        return this._billingEmail;
    }
    get blog() {
        return this.getStringAttribute('blog');
    }
    set blog(value) {
        this._blog = value;
    }
    resetBlog() {
        this._blog = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blogInput() {
        return this._blog;
    }
    get company() {
        return this.getStringAttribute('company');
    }
    set company(value) {
        this._company = value;
    }
    resetCompany() {
        this._company = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get companyInput() {
        return this._company;
    }
    get defaultRepositoryPermission() {
        return this.getStringAttribute('default_repository_permission');
    }
    set defaultRepositoryPermission(value) {
        this._defaultRepositoryPermission = value;
    }
    resetDefaultRepositoryPermission() {
        this._defaultRepositoryPermission = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultRepositoryPermissionInput() {
        return this._defaultRepositoryPermission;
    }
    get dependabotAlertsEnabledForNewRepositories() {
        return this.getBooleanAttribute('dependabot_alerts_enabled_for_new_repositories');
    }
    set dependabotAlertsEnabledForNewRepositories(value) {
        this._dependabotAlertsEnabledForNewRepositories = value;
    }
    resetDependabotAlertsEnabledForNewRepositories() {
        this._dependabotAlertsEnabledForNewRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dependabotAlertsEnabledForNewRepositoriesInput() {
        return this._dependabotAlertsEnabledForNewRepositories;
    }
    get dependabotSecurityUpdatesEnabledForNewRepositories() {
        return this.getBooleanAttribute('dependabot_security_updates_enabled_for_new_repositories');
    }
    set dependabotSecurityUpdatesEnabledForNewRepositories(value) {
        this._dependabotSecurityUpdatesEnabledForNewRepositories = value;
    }
    resetDependabotSecurityUpdatesEnabledForNewRepositories() {
        this._dependabotSecurityUpdatesEnabledForNewRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dependabotSecurityUpdatesEnabledForNewRepositoriesInput() {
        return this._dependabotSecurityUpdatesEnabledForNewRepositories;
    }
    get dependencyGraphEnabledForNewRepositories() {
        return this.getBooleanAttribute('dependency_graph_enabled_for_new_repositories');
    }
    set dependencyGraphEnabledForNewRepositories(value) {
        this._dependencyGraphEnabledForNewRepositories = value;
    }
    resetDependencyGraphEnabledForNewRepositories() {
        this._dependencyGraphEnabledForNewRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dependencyGraphEnabledForNewRepositoriesInput() {
        return this._dependencyGraphEnabledForNewRepositories;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get email() {
        return this.getStringAttribute('email');
    }
    set email(value) {
        this._email = value;
    }
    resetEmail() {
        this._email = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email;
    }
    get hasOrganizationProjects() {
        return this.getBooleanAttribute('has_organization_projects');
    }
    set hasOrganizationProjects(value) {
        this._hasOrganizationProjects = value;
    }
    resetHasOrganizationProjects() {
        this._hasOrganizationProjects = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hasOrganizationProjectsInput() {
        return this._hasOrganizationProjects;
    }
    get hasRepositoryProjects() {
        return this.getBooleanAttribute('has_repository_projects');
    }
    set hasRepositoryProjects(value) {
        this._hasRepositoryProjects = value;
    }
    resetHasRepositoryProjects() {
        this._hasRepositoryProjects = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hasRepositoryProjectsInput() {
        return this._hasRepositoryProjects;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get membersCanCreateInternalRepositories() {
        return this.getBooleanAttribute('members_can_create_internal_repositories');
    }
    set membersCanCreateInternalRepositories(value) {
        this._membersCanCreateInternalRepositories = value;
    }
    resetMembersCanCreateInternalRepositories() {
        this._membersCanCreateInternalRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get membersCanCreateInternalRepositoriesInput() {
        return this._membersCanCreateInternalRepositories;
    }
    get membersCanCreatePages() {
        return this.getBooleanAttribute('members_can_create_pages');
    }
    set membersCanCreatePages(value) {
        this._membersCanCreatePages = value;
    }
    resetMembersCanCreatePages() {
        this._membersCanCreatePages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get membersCanCreatePagesInput() {
        return this._membersCanCreatePages;
    }
    get membersCanCreatePrivatePages() {
        return this.getBooleanAttribute('members_can_create_private_pages');
    }
    set membersCanCreatePrivatePages(value) {
        this._membersCanCreatePrivatePages = value;
    }
    resetMembersCanCreatePrivatePages() {
        this._membersCanCreatePrivatePages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get membersCanCreatePrivatePagesInput() {
        return this._membersCanCreatePrivatePages;
    }
    get membersCanCreatePrivateRepositories() {
        return this.getBooleanAttribute('members_can_create_private_repositories');
    }
    set membersCanCreatePrivateRepositories(value) {
        this._membersCanCreatePrivateRepositories = value;
    }
    resetMembersCanCreatePrivateRepositories() {
        this._membersCanCreatePrivateRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get membersCanCreatePrivateRepositoriesInput() {
        return this._membersCanCreatePrivateRepositories;
    }
    get membersCanCreatePublicPages() {
        return this.getBooleanAttribute('members_can_create_public_pages');
    }
    set membersCanCreatePublicPages(value) {
        this._membersCanCreatePublicPages = value;
    }
    resetMembersCanCreatePublicPages() {
        this._membersCanCreatePublicPages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get membersCanCreatePublicPagesInput() {
        return this._membersCanCreatePublicPages;
    }
    get membersCanCreatePublicRepositories() {
        return this.getBooleanAttribute('members_can_create_public_repositories');
    }
    set membersCanCreatePublicRepositories(value) {
        this._membersCanCreatePublicRepositories = value;
    }
    resetMembersCanCreatePublicRepositories() {
        this._membersCanCreatePublicRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get membersCanCreatePublicRepositoriesInput() {
        return this._membersCanCreatePublicRepositories;
    }
    get membersCanCreateRepositories() {
        return this.getBooleanAttribute('members_can_create_repositories');
    }
    set membersCanCreateRepositories(value) {
        this._membersCanCreateRepositories = value;
    }
    resetMembersCanCreateRepositories() {
        this._membersCanCreateRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get membersCanCreateRepositoriesInput() {
        return this._membersCanCreateRepositories;
    }
    get membersCanForkPrivateRepositories() {
        return this.getBooleanAttribute('members_can_fork_private_repositories');
    }
    set membersCanForkPrivateRepositories(value) {
        this._membersCanForkPrivateRepositories = value;
    }
    resetMembersCanForkPrivateRepositories() {
        this._membersCanForkPrivateRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get membersCanForkPrivateRepositoriesInput() {
        return this._membersCanForkPrivateRepositories;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get secretScanningEnabledForNewRepositories() {
        return this.getBooleanAttribute('secret_scanning_enabled_for_new_repositories');
    }
    set secretScanningEnabledForNewRepositories(value) {
        this._secretScanningEnabledForNewRepositories = value;
    }
    resetSecretScanningEnabledForNewRepositories() {
        this._secretScanningEnabledForNewRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretScanningEnabledForNewRepositoriesInput() {
        return this._secretScanningEnabledForNewRepositories;
    }
    get secretScanningPushProtectionEnabledForNewRepositories() {
        return this.getBooleanAttribute('secret_scanning_push_protection_enabled_for_new_repositories');
    }
    set secretScanningPushProtectionEnabledForNewRepositories(value) {
        this._secretScanningPushProtectionEnabledForNewRepositories = value;
    }
    resetSecretScanningPushProtectionEnabledForNewRepositories() {
        this._secretScanningPushProtectionEnabledForNewRepositories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretScanningPushProtectionEnabledForNewRepositoriesInput() {
        return this._secretScanningPushProtectionEnabledForNewRepositories;
    }
    get twitterUsername() {
        return this.getStringAttribute('twitter_username');
    }
    set twitterUsername(value) {
        this._twitterUsername = value;
    }
    resetTwitterUsername() {
        this._twitterUsername = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get twitterUsernameInput() {
        return this._twitterUsername;
    }
    get webCommitSignoffRequired() {
        return this.getBooleanAttribute('web_commit_signoff_required');
    }
    set webCommitSignoffRequired(value) {
        this._webCommitSignoffRequired = value;
    }
    resetWebCommitSignoffRequired() {
        this._webCommitSignoffRequired = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webCommitSignoffRequiredInput() {
        return this._webCommitSignoffRequired;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            advanced_security_enabled_for_new_repositories: cdktf.booleanToTerraform(this._advancedSecurityEnabledForNewRepositories),
            billing_email: cdktf.stringToTerraform(this._billingEmail),
            blog: cdktf.stringToTerraform(this._blog),
            company: cdktf.stringToTerraform(this._company),
            default_repository_permission: cdktf.stringToTerraform(this._defaultRepositoryPermission),
            dependabot_alerts_enabled_for_new_repositories: cdktf.booleanToTerraform(this._dependabotAlertsEnabledForNewRepositories),
            dependabot_security_updates_enabled_for_new_repositories: cdktf.booleanToTerraform(this._dependabotSecurityUpdatesEnabledForNewRepositories),
            dependency_graph_enabled_for_new_repositories: cdktf.booleanToTerraform(this._dependencyGraphEnabledForNewRepositories),
            description: cdktf.stringToTerraform(this._description),
            email: cdktf.stringToTerraform(this._email),
            has_organization_projects: cdktf.booleanToTerraform(this._hasOrganizationProjects),
            has_repository_projects: cdktf.booleanToTerraform(this._hasRepositoryProjects),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            members_can_create_internal_repositories: cdktf.booleanToTerraform(this._membersCanCreateInternalRepositories),
            members_can_create_pages: cdktf.booleanToTerraform(this._membersCanCreatePages),
            members_can_create_private_pages: cdktf.booleanToTerraform(this._membersCanCreatePrivatePages),
            members_can_create_private_repositories: cdktf.booleanToTerraform(this._membersCanCreatePrivateRepositories),
            members_can_create_public_pages: cdktf.booleanToTerraform(this._membersCanCreatePublicPages),
            members_can_create_public_repositories: cdktf.booleanToTerraform(this._membersCanCreatePublicRepositories),
            members_can_create_repositories: cdktf.booleanToTerraform(this._membersCanCreateRepositories),
            members_can_fork_private_repositories: cdktf.booleanToTerraform(this._membersCanForkPrivateRepositories),
            name: cdktf.stringToTerraform(this._name),
            secret_scanning_enabled_for_new_repositories: cdktf.booleanToTerraform(this._secretScanningEnabledForNewRepositories),
            secret_scanning_push_protection_enabled_for_new_repositories: cdktf.booleanToTerraform(this._secretScanningPushProtectionEnabledForNewRepositories),
            twitter_username: cdktf.stringToTerraform(this._twitterUsername),
            web_commit_signoff_required: cdktf.booleanToTerraform(this._webCommitSignoffRequired),
        };
    }
}
exports.OrganizationSettings = OrganizationSettings;
_a = JSII_RTTI_SYMBOL_1;
OrganizationSettings[_a] = { fqn: "@cdktf/provider-github.organizationSettings.OrganizationSettings", version: "12.0.0" };
// =================
// STATIC PROPERTIES
// =================
OrganizationSettings.tfResourceType = "github_organization_settings";
//# sourceMappingURL=data:application/json;base64,