"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRuleset = exports.OrganizationRulesetRulesOutputReference = exports.organizationRulesetRulesToTerraform = exports.OrganizationRulesetRulesTagNamePatternOutputReference = exports.organizationRulesetRulesTagNamePatternToTerraform = exports.OrganizationRulesetRulesRequiredStatusChecksOutputReference = exports.organizationRulesetRulesRequiredStatusChecksToTerraform = exports.OrganizationRulesetRulesRequiredStatusChecksRequiredCheckList = exports.OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputReference = exports.organizationRulesetRulesRequiredStatusChecksRequiredCheckToTerraform = exports.OrganizationRulesetRulesPullRequestOutputReference = exports.organizationRulesetRulesPullRequestToTerraform = exports.OrganizationRulesetRulesCommitterEmailPatternOutputReference = exports.organizationRulesetRulesCommitterEmailPatternToTerraform = exports.OrganizationRulesetRulesCommitMessagePatternOutputReference = exports.organizationRulesetRulesCommitMessagePatternToTerraform = exports.OrganizationRulesetRulesCommitAuthorEmailPatternOutputReference = exports.organizationRulesetRulesCommitAuthorEmailPatternToTerraform = exports.OrganizationRulesetRulesBranchNamePatternOutputReference = exports.organizationRulesetRulesBranchNamePatternToTerraform = exports.OrganizationRulesetConditionsOutputReference = exports.organizationRulesetConditionsToTerraform = exports.OrganizationRulesetConditionsRepositoryNameOutputReference = exports.organizationRulesetConditionsRepositoryNameToTerraform = exports.OrganizationRulesetConditionsRefNameOutputReference = exports.organizationRulesetConditionsRefNameToTerraform = exports.OrganizationRulesetBypassActorsList = exports.OrganizationRulesetBypassActorsOutputReference = exports.organizationRulesetBypassActorsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function organizationRulesetBypassActorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actor_id: cdktf.numberToTerraform(struct.actorId),
        actor_type: cdktf.stringToTerraform(struct.actorType),
        bypass_mode: cdktf.stringToTerraform(struct.bypassMode),
    };
}
exports.organizationRulesetBypassActorsToTerraform = organizationRulesetBypassActorsToTerraform;
class OrganizationRulesetBypassActorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actorId !== undefined) {
            hasAnyValues = true;
            internalValueResult.actorId = this._actorId;
        }
        if (this._actorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.actorType = this._actorType;
        }
        if (this._bypassMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.bypassMode = this._bypassMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._actorId = undefined;
            this._actorType = undefined;
            this._bypassMode = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._actorId = value.actorId;
            this._actorType = value.actorType;
            this._bypassMode = value.bypassMode;
        }
    }
    get actorId() {
        return this.getNumberAttribute('actor_id');
    }
    set actorId(value) {
        this._actorId = value;
    }
    // Temporarily expose input value. Use with caution.
    get actorIdInput() {
        return this._actorId;
    }
    get actorType() {
        return this.getStringAttribute('actor_type');
    }
    set actorType(value) {
        this._actorType = value;
    }
    // Temporarily expose input value. Use with caution.
    get actorTypeInput() {
        return this._actorType;
    }
    get bypassMode() {
        return this.getStringAttribute('bypass_mode');
    }
    set bypassMode(value) {
        this._bypassMode = value;
    }
    // Temporarily expose input value. Use with caution.
    get bypassModeInput() {
        return this._bypassMode;
    }
}
exports.OrganizationRulesetBypassActorsOutputReference = OrganizationRulesetBypassActorsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
OrganizationRulesetBypassActorsOutputReference[_a] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetBypassActorsOutputReference", version: "12.0.0" };
class OrganizationRulesetBypassActorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OrganizationRulesetBypassActorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OrganizationRulesetBypassActorsList = OrganizationRulesetBypassActorsList;
_b = JSII_RTTI_SYMBOL_1;
OrganizationRulesetBypassActorsList[_b] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetBypassActorsList", version: "12.0.0" };
function organizationRulesetConditionsRefNameToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclude: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclude),
        include: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.include),
    };
}
exports.organizationRulesetConditionsRefNameToTerraform = organizationRulesetConditionsRefNameToTerraform;
class OrganizationRulesetConditionsRefNameOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exclude !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclude = this._exclude;
        }
        if (this._include !== undefined) {
            hasAnyValues = true;
            internalValueResult.include = this._include;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._exclude = undefined;
            this._include = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._exclude = value.exclude;
            this._include = value.include;
        }
    }
    get exclude() {
        return this.getListAttribute('exclude');
    }
    set exclude(value) {
        this._exclude = value;
    }
    // Temporarily expose input value. Use with caution.
    get excludeInput() {
        return this._exclude;
    }
    get include() {
        return this.getListAttribute('include');
    }
    set include(value) {
        this._include = value;
    }
    // Temporarily expose input value. Use with caution.
    get includeInput() {
        return this._include;
    }
}
exports.OrganizationRulesetConditionsRefNameOutputReference = OrganizationRulesetConditionsRefNameOutputReference;
_c = JSII_RTTI_SYMBOL_1;
OrganizationRulesetConditionsRefNameOutputReference[_c] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetConditionsRefNameOutputReference", version: "12.0.0" };
function organizationRulesetConditionsRepositoryNameToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclude: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclude),
        include: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.include),
        protected: cdktf.booleanToTerraform(struct.protected),
    };
}
exports.organizationRulesetConditionsRepositoryNameToTerraform = organizationRulesetConditionsRepositoryNameToTerraform;
class OrganizationRulesetConditionsRepositoryNameOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exclude !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclude = this._exclude;
        }
        if (this._include !== undefined) {
            hasAnyValues = true;
            internalValueResult.include = this._include;
        }
        if (this._protected !== undefined) {
            hasAnyValues = true;
            internalValueResult.protected = this._protected;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._exclude = undefined;
            this._include = undefined;
            this._protected = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._exclude = value.exclude;
            this._include = value.include;
            this._protected = value.protected;
        }
    }
    get exclude() {
        return this.getListAttribute('exclude');
    }
    set exclude(value) {
        this._exclude = value;
    }
    // Temporarily expose input value. Use with caution.
    get excludeInput() {
        return this._exclude;
    }
    get include() {
        return this.getListAttribute('include');
    }
    set include(value) {
        this._include = value;
    }
    // Temporarily expose input value. Use with caution.
    get includeInput() {
        return this._include;
    }
    get protected() {
        return this.getBooleanAttribute('protected');
    }
    set protected(value) {
        this._protected = value;
    }
    resetProtected() {
        this._protected = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get protectedInput() {
        return this._protected;
    }
}
exports.OrganizationRulesetConditionsRepositoryNameOutputReference = OrganizationRulesetConditionsRepositoryNameOutputReference;
_d = JSII_RTTI_SYMBOL_1;
OrganizationRulesetConditionsRepositoryNameOutputReference[_d] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetConditionsRepositoryNameOutputReference", version: "12.0.0" };
function organizationRulesetConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_id: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.repositoryId),
        ref_name: organizationRulesetConditionsRefNameToTerraform(struct.refName),
        repository_name: organizationRulesetConditionsRepositoryNameToTerraform(struct.repositoryName),
    };
}
exports.organizationRulesetConditionsToTerraform = organizationRulesetConditionsToTerraform;
class OrganizationRulesetConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ref_name - computed: false, optional: false, required: true
        this._refName = new OrganizationRulesetConditionsRefNameOutputReference(this, "ref_name");
        // repository_name - computed: false, optional: true, required: false
        this._repositoryName = new OrganizationRulesetConditionsRepositoryNameOutputReference(this, "repository_name");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryId !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryId = this._repositoryId;
        }
        if (this._refName?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.refName = this._refName?.internalValue;
        }
        if (this._repositoryName?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryName = this._repositoryName?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repositoryId = undefined;
            this._refName.internalValue = undefined;
            this._repositoryName.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repositoryId = value.repositoryId;
            this._refName.internalValue = value.refName;
            this._repositoryName.internalValue = value.repositoryName;
        }
    }
    get repositoryId() {
        return this.getNumberListAttribute('repository_id');
    }
    set repositoryId(value) {
        this._repositoryId = value;
    }
    resetRepositoryId() {
        this._repositoryId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryIdInput() {
        return this._repositoryId;
    }
    get refName() {
        return this._refName;
    }
    putRefName(value) {
        this._refName.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get refNameInput() {
        return this._refName.internalValue;
    }
    get repositoryName() {
        return this._repositoryName;
    }
    putRepositoryName(value) {
        this._repositoryName.internalValue = value;
    }
    resetRepositoryName() {
        this._repositoryName.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryNameInput() {
        return this._repositoryName.internalValue;
    }
}
exports.OrganizationRulesetConditionsOutputReference = OrganizationRulesetConditionsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
OrganizationRulesetConditionsOutputReference[_e] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetConditionsOutputReference", version: "12.0.0" };
function organizationRulesetRulesBranchNamePatternToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        negate: cdktf.booleanToTerraform(struct.negate),
        operator: cdktf.stringToTerraform(struct.operator),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.organizationRulesetRulesBranchNamePatternToTerraform = organizationRulesetRulesBranchNamePatternToTerraform;
class OrganizationRulesetRulesBranchNamePatternOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._negate !== undefined) {
            hasAnyValues = true;
            internalValueResult.negate = this._negate;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._negate = undefined;
            this._operator = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._negate = value.negate;
            this._operator = value.operator;
            this._pattern = value.pattern;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get negate() {
        return this.getBooleanAttribute('negate');
    }
    set negate(value) {
        this._negate = value;
    }
    resetNegate() {
        this._negate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get negateInput() {
        return this._negate;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.OrganizationRulesetRulesBranchNamePatternOutputReference = OrganizationRulesetRulesBranchNamePatternOutputReference;
_f = JSII_RTTI_SYMBOL_1;
OrganizationRulesetRulesBranchNamePatternOutputReference[_f] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetRulesBranchNamePatternOutputReference", version: "12.0.0" };
function organizationRulesetRulesCommitAuthorEmailPatternToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        negate: cdktf.booleanToTerraform(struct.negate),
        operator: cdktf.stringToTerraform(struct.operator),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.organizationRulesetRulesCommitAuthorEmailPatternToTerraform = organizationRulesetRulesCommitAuthorEmailPatternToTerraform;
class OrganizationRulesetRulesCommitAuthorEmailPatternOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._negate !== undefined) {
            hasAnyValues = true;
            internalValueResult.negate = this._negate;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._negate = undefined;
            this._operator = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._negate = value.negate;
            this._operator = value.operator;
            this._pattern = value.pattern;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get negate() {
        return this.getBooleanAttribute('negate');
    }
    set negate(value) {
        this._negate = value;
    }
    resetNegate() {
        this._negate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get negateInput() {
        return this._negate;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.OrganizationRulesetRulesCommitAuthorEmailPatternOutputReference = OrganizationRulesetRulesCommitAuthorEmailPatternOutputReference;
_g = JSII_RTTI_SYMBOL_1;
OrganizationRulesetRulesCommitAuthorEmailPatternOutputReference[_g] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetRulesCommitAuthorEmailPatternOutputReference", version: "12.0.0" };
function organizationRulesetRulesCommitMessagePatternToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        negate: cdktf.booleanToTerraform(struct.negate),
        operator: cdktf.stringToTerraform(struct.operator),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.organizationRulesetRulesCommitMessagePatternToTerraform = organizationRulesetRulesCommitMessagePatternToTerraform;
class OrganizationRulesetRulesCommitMessagePatternOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._negate !== undefined) {
            hasAnyValues = true;
            internalValueResult.negate = this._negate;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._negate = undefined;
            this._operator = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._negate = value.negate;
            this._operator = value.operator;
            this._pattern = value.pattern;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get negate() {
        return this.getBooleanAttribute('negate');
    }
    set negate(value) {
        this._negate = value;
    }
    resetNegate() {
        this._negate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get negateInput() {
        return this._negate;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.OrganizationRulesetRulesCommitMessagePatternOutputReference = OrganizationRulesetRulesCommitMessagePatternOutputReference;
_h = JSII_RTTI_SYMBOL_1;
OrganizationRulesetRulesCommitMessagePatternOutputReference[_h] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetRulesCommitMessagePatternOutputReference", version: "12.0.0" };
function organizationRulesetRulesCommitterEmailPatternToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        negate: cdktf.booleanToTerraform(struct.negate),
        operator: cdktf.stringToTerraform(struct.operator),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.organizationRulesetRulesCommitterEmailPatternToTerraform = organizationRulesetRulesCommitterEmailPatternToTerraform;
class OrganizationRulesetRulesCommitterEmailPatternOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._negate !== undefined) {
            hasAnyValues = true;
            internalValueResult.negate = this._negate;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._negate = undefined;
            this._operator = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._negate = value.negate;
            this._operator = value.operator;
            this._pattern = value.pattern;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get negate() {
        return this.getBooleanAttribute('negate');
    }
    set negate(value) {
        this._negate = value;
    }
    resetNegate() {
        this._negate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get negateInput() {
        return this._negate;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.OrganizationRulesetRulesCommitterEmailPatternOutputReference = OrganizationRulesetRulesCommitterEmailPatternOutputReference;
_j = JSII_RTTI_SYMBOL_1;
OrganizationRulesetRulesCommitterEmailPatternOutputReference[_j] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetRulesCommitterEmailPatternOutputReference", version: "12.0.0" };
function organizationRulesetRulesPullRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dismiss_stale_reviews_on_push: cdktf.booleanToTerraform(struct.dismissStaleReviewsOnPush),
        require_code_owner_review: cdktf.booleanToTerraform(struct.requireCodeOwnerReview),
        require_last_push_approval: cdktf.booleanToTerraform(struct.requireLastPushApproval),
        required_approving_review_count: cdktf.numberToTerraform(struct.requiredApprovingReviewCount),
        required_review_thread_resolution: cdktf.booleanToTerraform(struct.requiredReviewThreadResolution),
    };
}
exports.organizationRulesetRulesPullRequestToTerraform = organizationRulesetRulesPullRequestToTerraform;
class OrganizationRulesetRulesPullRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dismissStaleReviewsOnPush !== undefined) {
            hasAnyValues = true;
            internalValueResult.dismissStaleReviewsOnPush = this._dismissStaleReviewsOnPush;
        }
        if (this._requireCodeOwnerReview !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireCodeOwnerReview = this._requireCodeOwnerReview;
        }
        if (this._requireLastPushApproval !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireLastPushApproval = this._requireLastPushApproval;
        }
        if (this._requiredApprovingReviewCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.requiredApprovingReviewCount = this._requiredApprovingReviewCount;
        }
        if (this._requiredReviewThreadResolution !== undefined) {
            hasAnyValues = true;
            internalValueResult.requiredReviewThreadResolution = this._requiredReviewThreadResolution;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dismissStaleReviewsOnPush = undefined;
            this._requireCodeOwnerReview = undefined;
            this._requireLastPushApproval = undefined;
            this._requiredApprovingReviewCount = undefined;
            this._requiredReviewThreadResolution = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dismissStaleReviewsOnPush = value.dismissStaleReviewsOnPush;
            this._requireCodeOwnerReview = value.requireCodeOwnerReview;
            this._requireLastPushApproval = value.requireLastPushApproval;
            this._requiredApprovingReviewCount = value.requiredApprovingReviewCount;
            this._requiredReviewThreadResolution = value.requiredReviewThreadResolution;
        }
    }
    get dismissStaleReviewsOnPush() {
        return this.getBooleanAttribute('dismiss_stale_reviews_on_push');
    }
    set dismissStaleReviewsOnPush(value) {
        this._dismissStaleReviewsOnPush = value;
    }
    resetDismissStaleReviewsOnPush() {
        this._dismissStaleReviewsOnPush = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dismissStaleReviewsOnPushInput() {
        return this._dismissStaleReviewsOnPush;
    }
    get requireCodeOwnerReview() {
        return this.getBooleanAttribute('require_code_owner_review');
    }
    set requireCodeOwnerReview(value) {
        this._requireCodeOwnerReview = value;
    }
    resetRequireCodeOwnerReview() {
        this._requireCodeOwnerReview = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireCodeOwnerReviewInput() {
        return this._requireCodeOwnerReview;
    }
    get requireLastPushApproval() {
        return this.getBooleanAttribute('require_last_push_approval');
    }
    set requireLastPushApproval(value) {
        this._requireLastPushApproval = value;
    }
    resetRequireLastPushApproval() {
        this._requireLastPushApproval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireLastPushApprovalInput() {
        return this._requireLastPushApproval;
    }
    get requiredApprovingReviewCount() {
        return this.getNumberAttribute('required_approving_review_count');
    }
    set requiredApprovingReviewCount(value) {
        this._requiredApprovingReviewCount = value;
    }
    resetRequiredApprovingReviewCount() {
        this._requiredApprovingReviewCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredApprovingReviewCountInput() {
        return this._requiredApprovingReviewCount;
    }
    get requiredReviewThreadResolution() {
        return this.getBooleanAttribute('required_review_thread_resolution');
    }
    set requiredReviewThreadResolution(value) {
        this._requiredReviewThreadResolution = value;
    }
    resetRequiredReviewThreadResolution() {
        this._requiredReviewThreadResolution = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredReviewThreadResolutionInput() {
        return this._requiredReviewThreadResolution;
    }
}
exports.OrganizationRulesetRulesPullRequestOutputReference = OrganizationRulesetRulesPullRequestOutputReference;
_k = JSII_RTTI_SYMBOL_1;
OrganizationRulesetRulesPullRequestOutputReference[_k] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetRulesPullRequestOutputReference", version: "12.0.0" };
function organizationRulesetRulesRequiredStatusChecksRequiredCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        context: cdktf.stringToTerraform(struct.context),
        integration_id: cdktf.numberToTerraform(struct.integrationId),
    };
}
exports.organizationRulesetRulesRequiredStatusChecksRequiredCheckToTerraform = organizationRulesetRulesRequiredStatusChecksRequiredCheckToTerraform;
class OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._context !== undefined) {
            hasAnyValues = true;
            internalValueResult.context = this._context;
        }
        if (this._integrationId !== undefined) {
            hasAnyValues = true;
            internalValueResult.integrationId = this._integrationId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._context = undefined;
            this._integrationId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._context = value.context;
            this._integrationId = value.integrationId;
        }
    }
    get context() {
        return this.getStringAttribute('context');
    }
    set context(value) {
        this._context = value;
    }
    // Temporarily expose input value. Use with caution.
    get contextInput() {
        return this._context;
    }
    get integrationId() {
        return this.getNumberAttribute('integration_id');
    }
    set integrationId(value) {
        this._integrationId = value;
    }
    resetIntegrationId() {
        this._integrationId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integrationIdInput() {
        return this._integrationId;
    }
}
exports.OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputReference = OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputReference;
_l = JSII_RTTI_SYMBOL_1;
OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputReference[_l] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputReference", version: "12.0.0" };
class OrganizationRulesetRulesRequiredStatusChecksRequiredCheckList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OrganizationRulesetRulesRequiredStatusChecksRequiredCheckList = OrganizationRulesetRulesRequiredStatusChecksRequiredCheckList;
_m = JSII_RTTI_SYMBOL_1;
OrganizationRulesetRulesRequiredStatusChecksRequiredCheckList[_m] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetRulesRequiredStatusChecksRequiredCheckList", version: "12.0.0" };
function organizationRulesetRulesRequiredStatusChecksToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        strict_required_status_checks_policy: cdktf.booleanToTerraform(struct.strictRequiredStatusChecksPolicy),
        required_check: cdktf.listMapper(organizationRulesetRulesRequiredStatusChecksRequiredCheckToTerraform, true)(struct.requiredCheck),
    };
}
exports.organizationRulesetRulesRequiredStatusChecksToTerraform = organizationRulesetRulesRequiredStatusChecksToTerraform;
class OrganizationRulesetRulesRequiredStatusChecksOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // required_check - computed: false, optional: false, required: true
        this._requiredCheck = new OrganizationRulesetRulesRequiredStatusChecksRequiredCheckList(this, "required_check", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._strictRequiredStatusChecksPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.strictRequiredStatusChecksPolicy = this._strictRequiredStatusChecksPolicy;
        }
        if (this._requiredCheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requiredCheck = this._requiredCheck?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._strictRequiredStatusChecksPolicy = undefined;
            this._requiredCheck.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._strictRequiredStatusChecksPolicy = value.strictRequiredStatusChecksPolicy;
            this._requiredCheck.internalValue = value.requiredCheck;
        }
    }
    get strictRequiredStatusChecksPolicy() {
        return this.getBooleanAttribute('strict_required_status_checks_policy');
    }
    set strictRequiredStatusChecksPolicy(value) {
        this._strictRequiredStatusChecksPolicy = value;
    }
    resetStrictRequiredStatusChecksPolicy() {
        this._strictRequiredStatusChecksPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strictRequiredStatusChecksPolicyInput() {
        return this._strictRequiredStatusChecksPolicy;
    }
    get requiredCheck() {
        return this._requiredCheck;
    }
    putRequiredCheck(value) {
        this._requiredCheck.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get requiredCheckInput() {
        return this._requiredCheck.internalValue;
    }
}
exports.OrganizationRulesetRulesRequiredStatusChecksOutputReference = OrganizationRulesetRulesRequiredStatusChecksOutputReference;
_o = JSII_RTTI_SYMBOL_1;
OrganizationRulesetRulesRequiredStatusChecksOutputReference[_o] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetRulesRequiredStatusChecksOutputReference", version: "12.0.0" };
function organizationRulesetRulesTagNamePatternToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        negate: cdktf.booleanToTerraform(struct.negate),
        operator: cdktf.stringToTerraform(struct.operator),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.organizationRulesetRulesTagNamePatternToTerraform = organizationRulesetRulesTagNamePatternToTerraform;
class OrganizationRulesetRulesTagNamePatternOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._negate !== undefined) {
            hasAnyValues = true;
            internalValueResult.negate = this._negate;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._negate = undefined;
            this._operator = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._negate = value.negate;
            this._operator = value.operator;
            this._pattern = value.pattern;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get negate() {
        return this.getBooleanAttribute('negate');
    }
    set negate(value) {
        this._negate = value;
    }
    resetNegate() {
        this._negate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get negateInput() {
        return this._negate;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.OrganizationRulesetRulesTagNamePatternOutputReference = OrganizationRulesetRulesTagNamePatternOutputReference;
_p = JSII_RTTI_SYMBOL_1;
OrganizationRulesetRulesTagNamePatternOutputReference[_p] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetRulesTagNamePatternOutputReference", version: "12.0.0" };
function organizationRulesetRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        creation: cdktf.booleanToTerraform(struct.creation),
        deletion: cdktf.booleanToTerraform(struct.deletion),
        non_fast_forward: cdktf.booleanToTerraform(struct.nonFastForward),
        required_linear_history: cdktf.booleanToTerraform(struct.requiredLinearHistory),
        required_signatures: cdktf.booleanToTerraform(struct.requiredSignatures),
        update: cdktf.booleanToTerraform(struct.update),
        branch_name_pattern: organizationRulesetRulesBranchNamePatternToTerraform(struct.branchNamePattern),
        commit_author_email_pattern: organizationRulesetRulesCommitAuthorEmailPatternToTerraform(struct.commitAuthorEmailPattern),
        commit_message_pattern: organizationRulesetRulesCommitMessagePatternToTerraform(struct.commitMessagePattern),
        committer_email_pattern: organizationRulesetRulesCommitterEmailPatternToTerraform(struct.committerEmailPattern),
        pull_request: organizationRulesetRulesPullRequestToTerraform(struct.pullRequest),
        required_status_checks: organizationRulesetRulesRequiredStatusChecksToTerraform(struct.requiredStatusChecks),
        tag_name_pattern: organizationRulesetRulesTagNamePatternToTerraform(struct.tagNamePattern),
    };
}
exports.organizationRulesetRulesToTerraform = organizationRulesetRulesToTerraform;
class OrganizationRulesetRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // branch_name_pattern - computed: false, optional: true, required: false
        this._branchNamePattern = new OrganizationRulesetRulesBranchNamePatternOutputReference(this, "branch_name_pattern");
        // commit_author_email_pattern - computed: false, optional: true, required: false
        this._commitAuthorEmailPattern = new OrganizationRulesetRulesCommitAuthorEmailPatternOutputReference(this, "commit_author_email_pattern");
        // commit_message_pattern - computed: false, optional: true, required: false
        this._commitMessagePattern = new OrganizationRulesetRulesCommitMessagePatternOutputReference(this, "commit_message_pattern");
        // committer_email_pattern - computed: false, optional: true, required: false
        this._committerEmailPattern = new OrganizationRulesetRulesCommitterEmailPatternOutputReference(this, "committer_email_pattern");
        // pull_request - computed: false, optional: true, required: false
        this._pullRequest = new OrganizationRulesetRulesPullRequestOutputReference(this, "pull_request");
        // required_status_checks - computed: false, optional: true, required: false
        this._requiredStatusChecks = new OrganizationRulesetRulesRequiredStatusChecksOutputReference(this, "required_status_checks");
        // tag_name_pattern - computed: false, optional: true, required: false
        this._tagNamePattern = new OrganizationRulesetRulesTagNamePatternOutputReference(this, "tag_name_pattern");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._creation !== undefined) {
            hasAnyValues = true;
            internalValueResult.creation = this._creation;
        }
        if (this._deletion !== undefined) {
            hasAnyValues = true;
            internalValueResult.deletion = this._deletion;
        }
        if (this._nonFastForward !== undefined) {
            hasAnyValues = true;
            internalValueResult.nonFastForward = this._nonFastForward;
        }
        if (this._requiredLinearHistory !== undefined) {
            hasAnyValues = true;
            internalValueResult.requiredLinearHistory = this._requiredLinearHistory;
        }
        if (this._requiredSignatures !== undefined) {
            hasAnyValues = true;
            internalValueResult.requiredSignatures = this._requiredSignatures;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        if (this._branchNamePattern?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.branchNamePattern = this._branchNamePattern?.internalValue;
        }
        if (this._commitAuthorEmailPattern?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.commitAuthorEmailPattern = this._commitAuthorEmailPattern?.internalValue;
        }
        if (this._commitMessagePattern?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.commitMessagePattern = this._commitMessagePattern?.internalValue;
        }
        if (this._committerEmailPattern?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.committerEmailPattern = this._committerEmailPattern?.internalValue;
        }
        if (this._pullRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pullRequest = this._pullRequest?.internalValue;
        }
        if (this._requiredStatusChecks?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requiredStatusChecks = this._requiredStatusChecks?.internalValue;
        }
        if (this._tagNamePattern?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagNamePattern = this._tagNamePattern?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._creation = undefined;
            this._deletion = undefined;
            this._nonFastForward = undefined;
            this._requiredLinearHistory = undefined;
            this._requiredSignatures = undefined;
            this._update = undefined;
            this._branchNamePattern.internalValue = undefined;
            this._commitAuthorEmailPattern.internalValue = undefined;
            this._commitMessagePattern.internalValue = undefined;
            this._committerEmailPattern.internalValue = undefined;
            this._pullRequest.internalValue = undefined;
            this._requiredStatusChecks.internalValue = undefined;
            this._tagNamePattern.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._creation = value.creation;
            this._deletion = value.deletion;
            this._nonFastForward = value.nonFastForward;
            this._requiredLinearHistory = value.requiredLinearHistory;
            this._requiredSignatures = value.requiredSignatures;
            this._update = value.update;
            this._branchNamePattern.internalValue = value.branchNamePattern;
            this._commitAuthorEmailPattern.internalValue = value.commitAuthorEmailPattern;
            this._commitMessagePattern.internalValue = value.commitMessagePattern;
            this._committerEmailPattern.internalValue = value.committerEmailPattern;
            this._pullRequest.internalValue = value.pullRequest;
            this._requiredStatusChecks.internalValue = value.requiredStatusChecks;
            this._tagNamePattern.internalValue = value.tagNamePattern;
        }
    }
    get creation() {
        return this.getBooleanAttribute('creation');
    }
    set creation(value) {
        this._creation = value;
    }
    resetCreation() {
        this._creation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get creationInput() {
        return this._creation;
    }
    get deletion() {
        return this.getBooleanAttribute('deletion');
    }
    set deletion(value) {
        this._deletion = value;
    }
    resetDeletion() {
        this._deletion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionInput() {
        return this._deletion;
    }
    get nonFastForward() {
        return this.getBooleanAttribute('non_fast_forward');
    }
    set nonFastForward(value) {
        this._nonFastForward = value;
    }
    resetNonFastForward() {
        this._nonFastForward = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nonFastForwardInput() {
        return this._nonFastForward;
    }
    get requiredLinearHistory() {
        return this.getBooleanAttribute('required_linear_history');
    }
    set requiredLinearHistory(value) {
        this._requiredLinearHistory = value;
    }
    resetRequiredLinearHistory() {
        this._requiredLinearHistory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredLinearHistoryInput() {
        return this._requiredLinearHistory;
    }
    get requiredSignatures() {
        return this.getBooleanAttribute('required_signatures');
    }
    set requiredSignatures(value) {
        this._requiredSignatures = value;
    }
    resetRequiredSignatures() {
        this._requiredSignatures = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredSignaturesInput() {
        return this._requiredSignatures;
    }
    get update() {
        return this.getBooleanAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
    get branchNamePattern() {
        return this._branchNamePattern;
    }
    putBranchNamePattern(value) {
        this._branchNamePattern.internalValue = value;
    }
    resetBranchNamePattern() {
        this._branchNamePattern.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get branchNamePatternInput() {
        return this._branchNamePattern.internalValue;
    }
    get commitAuthorEmailPattern() {
        return this._commitAuthorEmailPattern;
    }
    putCommitAuthorEmailPattern(value) {
        this._commitAuthorEmailPattern.internalValue = value;
    }
    resetCommitAuthorEmailPattern() {
        this._commitAuthorEmailPattern.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commitAuthorEmailPatternInput() {
        return this._commitAuthorEmailPattern.internalValue;
    }
    get commitMessagePattern() {
        return this._commitMessagePattern;
    }
    putCommitMessagePattern(value) {
        this._commitMessagePattern.internalValue = value;
    }
    resetCommitMessagePattern() {
        this._commitMessagePattern.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commitMessagePatternInput() {
        return this._commitMessagePattern.internalValue;
    }
    get committerEmailPattern() {
        return this._committerEmailPattern;
    }
    putCommitterEmailPattern(value) {
        this._committerEmailPattern.internalValue = value;
    }
    resetCommitterEmailPattern() {
        this._committerEmailPattern.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get committerEmailPatternInput() {
        return this._committerEmailPattern.internalValue;
    }
    get pullRequest() {
        return this._pullRequest;
    }
    putPullRequest(value) {
        this._pullRequest.internalValue = value;
    }
    resetPullRequest() {
        this._pullRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pullRequestInput() {
        return this._pullRequest.internalValue;
    }
    get requiredStatusChecks() {
        return this._requiredStatusChecks;
    }
    putRequiredStatusChecks(value) {
        this._requiredStatusChecks.internalValue = value;
    }
    resetRequiredStatusChecks() {
        this._requiredStatusChecks.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredStatusChecksInput() {
        return this._requiredStatusChecks.internalValue;
    }
    get tagNamePattern() {
        return this._tagNamePattern;
    }
    putTagNamePattern(value) {
        this._tagNamePattern.internalValue = value;
    }
    resetTagNamePattern() {
        this._tagNamePattern.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagNamePatternInput() {
        return this._tagNamePattern.internalValue;
    }
}
exports.OrganizationRulesetRulesOutputReference = OrganizationRulesetRulesOutputReference;
_q = JSII_RTTI_SYMBOL_1;
OrganizationRulesetRulesOutputReference[_q] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRulesetRulesOutputReference", version: "12.0.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/organization_ruleset github_organization_ruleset}
*/
class OrganizationRuleset extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a OrganizationRuleset resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the OrganizationRuleset to import
    * @param importFromId The id of the existing OrganizationRuleset that should be imported. Refer to the {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/organization_ruleset#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the OrganizationRuleset to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "github_organization_ruleset", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/organization_ruleset github_organization_ruleset} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options OrganizationRulesetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'github_organization_ruleset',
            terraformGeneratorMetadata: {
                providerName: 'github',
                providerVersion: '5.40.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // bypass_actors - computed: false, optional: true, required: false
        this._bypassActors = new OrganizationRulesetBypassActorsList(this, "bypass_actors", false);
        // conditions - computed: false, optional: true, required: false
        this._conditions = new OrganizationRulesetConditionsOutputReference(this, "conditions");
        // rules - computed: false, optional: false, required: true
        this._rules = new OrganizationRulesetRulesOutputReference(this, "rules");
        this._enforcement = config.enforcement;
        this._id = config.id;
        this._name = config.name;
        this._target = config.target;
        this._bypassActors.internalValue = config.bypassActors;
        this._conditions.internalValue = config.conditions;
        this._rules.internalValue = config.rules;
    }
    get enforcement() {
        return this.getStringAttribute('enforcement');
    }
    set enforcement(value) {
        this._enforcement = value;
    }
    // Temporarily expose input value. Use with caution.
    get enforcementInput() {
        return this._enforcement;
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // node_id - computed: true, optional: false, required: false
    get nodeId() {
        return this.getStringAttribute('node_id');
    }
    // ruleset_id - computed: true, optional: false, required: false
    get rulesetId() {
        return this.getNumberAttribute('ruleset_id');
    }
    get target() {
        return this.getStringAttribute('target');
    }
    set target(value) {
        this._target = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetInput() {
        return this._target;
    }
    get bypassActors() {
        return this._bypassActors;
    }
    putBypassActors(value) {
        this._bypassActors.internalValue = value;
    }
    resetBypassActors() {
        this._bypassActors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bypassActorsInput() {
        return this._bypassActors.internalValue;
    }
    get conditions() {
        return this._conditions;
    }
    putConditions(value) {
        this._conditions.internalValue = value;
    }
    resetConditions() {
        this._conditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionsInput() {
        return this._conditions.internalValue;
    }
    get rules() {
        return this._rules;
    }
    putRules(value) {
        this._rules.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rulesInput() {
        return this._rules.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            enforcement: cdktf.stringToTerraform(this._enforcement),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            target: cdktf.stringToTerraform(this._target),
            bypass_actors: cdktf.listMapper(organizationRulesetBypassActorsToTerraform, true)(this._bypassActors.internalValue),
            conditions: organizationRulesetConditionsToTerraform(this._conditions.internalValue),
            rules: organizationRulesetRulesToTerraform(this._rules.internalValue),
        };
    }
}
exports.OrganizationRuleset = OrganizationRuleset;
_r = JSII_RTTI_SYMBOL_1;
OrganizationRuleset[_r] = { fqn: "@cdktf/provider-github.organizationRuleset.OrganizationRuleset", version: "12.0.0" };
// =================
// STATIC PROPERTIES
// =================
OrganizationRuleset.tfResourceType = "github_organization_ruleset";
//# sourceMappingURL=data:application/json;base64,