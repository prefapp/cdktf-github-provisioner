"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BranchProtectionV3 = exports.BranchProtectionV3RestrictionsOutputReference = exports.branchProtectionV3RestrictionsToTerraform = exports.BranchProtectionV3RequiredStatusChecksOutputReference = exports.branchProtectionV3RequiredStatusChecksToTerraform = exports.BranchProtectionV3RequiredPullRequestReviewsOutputReference = exports.branchProtectionV3RequiredPullRequestReviewsToTerraform = exports.BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputReference = exports.branchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function branchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        apps: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.apps),
        teams: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.teams),
        users: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.users),
    };
}
exports.branchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesToTerraform = branchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesToTerraform;
class BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apps !== undefined) {
            hasAnyValues = true;
            internalValueResult.apps = this._apps;
        }
        if (this._teams !== undefined) {
            hasAnyValues = true;
            internalValueResult.teams = this._teams;
        }
        if (this._users !== undefined) {
            hasAnyValues = true;
            internalValueResult.users = this._users;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apps = undefined;
            this._teams = undefined;
            this._users = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apps = value.apps;
            this._teams = value.teams;
            this._users = value.users;
        }
    }
    get apps() {
        return cdktf.Fn.tolist(this.getListAttribute('apps'));
    }
    set apps(value) {
        this._apps = value;
    }
    resetApps() {
        this._apps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appsInput() {
        return this._apps;
    }
    get teams() {
        return cdktf.Fn.tolist(this.getListAttribute('teams'));
    }
    set teams(value) {
        this._teams = value;
    }
    resetTeams() {
        this._teams = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get teamsInput() {
        return this._teams;
    }
    get users() {
        return cdktf.Fn.tolist(this.getListAttribute('users'));
    }
    set users(value) {
        this._users = value;
    }
    resetUsers() {
        this._users = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usersInput() {
        return this._users;
    }
}
exports.BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputReference = BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputReference;
_a = JSII_RTTI_SYMBOL_1;
BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputReference[_a] = { fqn: "@cdktf/provider-github.branchProtectionV3.BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputReference", version: "12.0.0" };
function branchProtectionV3RequiredPullRequestReviewsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dismiss_stale_reviews: cdktf.booleanToTerraform(struct.dismissStaleReviews),
        dismissal_teams: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.dismissalTeams),
        dismissal_users: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.dismissalUsers),
        include_admins: cdktf.booleanToTerraform(struct.includeAdmins),
        require_code_owner_reviews: cdktf.booleanToTerraform(struct.requireCodeOwnerReviews),
        required_approving_review_count: cdktf.numberToTerraform(struct.requiredApprovingReviewCount),
        bypass_pull_request_allowances: branchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesToTerraform(struct.bypassPullRequestAllowances),
    };
}
exports.branchProtectionV3RequiredPullRequestReviewsToTerraform = branchProtectionV3RequiredPullRequestReviewsToTerraform;
class BranchProtectionV3RequiredPullRequestReviewsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // bypass_pull_request_allowances - computed: false, optional: true, required: false
        this._bypassPullRequestAllowances = new BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputReference(this, "bypass_pull_request_allowances");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dismissStaleReviews !== undefined) {
            hasAnyValues = true;
            internalValueResult.dismissStaleReviews = this._dismissStaleReviews;
        }
        if (this._dismissalTeams !== undefined) {
            hasAnyValues = true;
            internalValueResult.dismissalTeams = this._dismissalTeams;
        }
        if (this._dismissalUsers !== undefined) {
            hasAnyValues = true;
            internalValueResult.dismissalUsers = this._dismissalUsers;
        }
        if (this._includeAdmins !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeAdmins = this._includeAdmins;
        }
        if (this._requireCodeOwnerReviews !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireCodeOwnerReviews = this._requireCodeOwnerReviews;
        }
        if (this._requiredApprovingReviewCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.requiredApprovingReviewCount = this._requiredApprovingReviewCount;
        }
        if (this._bypassPullRequestAllowances?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bypassPullRequestAllowances = this._bypassPullRequestAllowances?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dismissStaleReviews = undefined;
            this._dismissalTeams = undefined;
            this._dismissalUsers = undefined;
            this._includeAdmins = undefined;
            this._requireCodeOwnerReviews = undefined;
            this._requiredApprovingReviewCount = undefined;
            this._bypassPullRequestAllowances.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dismissStaleReviews = value.dismissStaleReviews;
            this._dismissalTeams = value.dismissalTeams;
            this._dismissalUsers = value.dismissalUsers;
            this._includeAdmins = value.includeAdmins;
            this._requireCodeOwnerReviews = value.requireCodeOwnerReviews;
            this._requiredApprovingReviewCount = value.requiredApprovingReviewCount;
            this._bypassPullRequestAllowances.internalValue = value.bypassPullRequestAllowances;
        }
    }
    get dismissStaleReviews() {
        return this.getBooleanAttribute('dismiss_stale_reviews');
    }
    set dismissStaleReviews(value) {
        this._dismissStaleReviews = value;
    }
    resetDismissStaleReviews() {
        this._dismissStaleReviews = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dismissStaleReviewsInput() {
        return this._dismissStaleReviews;
    }
    get dismissalTeams() {
        return cdktf.Fn.tolist(this.getListAttribute('dismissal_teams'));
    }
    set dismissalTeams(value) {
        this._dismissalTeams = value;
    }
    resetDismissalTeams() {
        this._dismissalTeams = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dismissalTeamsInput() {
        return this._dismissalTeams;
    }
    get dismissalUsers() {
        return cdktf.Fn.tolist(this.getListAttribute('dismissal_users'));
    }
    set dismissalUsers(value) {
        this._dismissalUsers = value;
    }
    resetDismissalUsers() {
        this._dismissalUsers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dismissalUsersInput() {
        return this._dismissalUsers;
    }
    get includeAdmins() {
        return this.getBooleanAttribute('include_admins');
    }
    set includeAdmins(value) {
        this._includeAdmins = value;
    }
    resetIncludeAdmins() {
        this._includeAdmins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeAdminsInput() {
        return this._includeAdmins;
    }
    get requireCodeOwnerReviews() {
        return this.getBooleanAttribute('require_code_owner_reviews');
    }
    set requireCodeOwnerReviews(value) {
        this._requireCodeOwnerReviews = value;
    }
    resetRequireCodeOwnerReviews() {
        this._requireCodeOwnerReviews = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireCodeOwnerReviewsInput() {
        return this._requireCodeOwnerReviews;
    }
    get requiredApprovingReviewCount() {
        return this.getNumberAttribute('required_approving_review_count');
    }
    set requiredApprovingReviewCount(value) {
        this._requiredApprovingReviewCount = value;
    }
    resetRequiredApprovingReviewCount() {
        this._requiredApprovingReviewCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredApprovingReviewCountInput() {
        return this._requiredApprovingReviewCount;
    }
    get bypassPullRequestAllowances() {
        return this._bypassPullRequestAllowances;
    }
    putBypassPullRequestAllowances(value) {
        this._bypassPullRequestAllowances.internalValue = value;
    }
    resetBypassPullRequestAllowances() {
        this._bypassPullRequestAllowances.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bypassPullRequestAllowancesInput() {
        return this._bypassPullRequestAllowances.internalValue;
    }
}
exports.BranchProtectionV3RequiredPullRequestReviewsOutputReference = BranchProtectionV3RequiredPullRequestReviewsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
BranchProtectionV3RequiredPullRequestReviewsOutputReference[_b] = { fqn: "@cdktf/provider-github.branchProtectionV3.BranchProtectionV3RequiredPullRequestReviewsOutputReference", version: "12.0.0" };
function branchProtectionV3RequiredStatusChecksToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        checks: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.checks),
        contexts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.contexts),
        include_admins: cdktf.booleanToTerraform(struct.includeAdmins),
        strict: cdktf.booleanToTerraform(struct.strict),
    };
}
exports.branchProtectionV3RequiredStatusChecksToTerraform = branchProtectionV3RequiredStatusChecksToTerraform;
class BranchProtectionV3RequiredStatusChecksOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._checks !== undefined) {
            hasAnyValues = true;
            internalValueResult.checks = this._checks;
        }
        if (this._contexts !== undefined) {
            hasAnyValues = true;
            internalValueResult.contexts = this._contexts;
        }
        if (this._includeAdmins !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeAdmins = this._includeAdmins;
        }
        if (this._strict !== undefined) {
            hasAnyValues = true;
            internalValueResult.strict = this._strict;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._checks = undefined;
            this._contexts = undefined;
            this._includeAdmins = undefined;
            this._strict = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._checks = value.checks;
            this._contexts = value.contexts;
            this._includeAdmins = value.includeAdmins;
            this._strict = value.strict;
        }
    }
    get checks() {
        return cdktf.Fn.tolist(this.getListAttribute('checks'));
    }
    set checks(value) {
        this._checks = value;
    }
    resetChecks() {
        this._checks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get checksInput() {
        return this._checks;
    }
    get contexts() {
        return cdktf.Fn.tolist(this.getListAttribute('contexts'));
    }
    set contexts(value) {
        this._contexts = value;
    }
    resetContexts() {
        this._contexts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contextsInput() {
        return this._contexts;
    }
    get includeAdmins() {
        return this.getBooleanAttribute('include_admins');
    }
    set includeAdmins(value) {
        this._includeAdmins = value;
    }
    resetIncludeAdmins() {
        this._includeAdmins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeAdminsInput() {
        return this._includeAdmins;
    }
    get strict() {
        return this.getBooleanAttribute('strict');
    }
    set strict(value) {
        this._strict = value;
    }
    resetStrict() {
        this._strict = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strictInput() {
        return this._strict;
    }
}
exports.BranchProtectionV3RequiredStatusChecksOutputReference = BranchProtectionV3RequiredStatusChecksOutputReference;
_c = JSII_RTTI_SYMBOL_1;
BranchProtectionV3RequiredStatusChecksOutputReference[_c] = { fqn: "@cdktf/provider-github.branchProtectionV3.BranchProtectionV3RequiredStatusChecksOutputReference", version: "12.0.0" };
function branchProtectionV3RestrictionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        apps: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.apps),
        teams: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.teams),
        users: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.users),
    };
}
exports.branchProtectionV3RestrictionsToTerraform = branchProtectionV3RestrictionsToTerraform;
class BranchProtectionV3RestrictionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apps !== undefined) {
            hasAnyValues = true;
            internalValueResult.apps = this._apps;
        }
        if (this._teams !== undefined) {
            hasAnyValues = true;
            internalValueResult.teams = this._teams;
        }
        if (this._users !== undefined) {
            hasAnyValues = true;
            internalValueResult.users = this._users;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apps = undefined;
            this._teams = undefined;
            this._users = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apps = value.apps;
            this._teams = value.teams;
            this._users = value.users;
        }
    }
    get apps() {
        return cdktf.Fn.tolist(this.getListAttribute('apps'));
    }
    set apps(value) {
        this._apps = value;
    }
    resetApps() {
        this._apps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appsInput() {
        return this._apps;
    }
    get teams() {
        return cdktf.Fn.tolist(this.getListAttribute('teams'));
    }
    set teams(value) {
        this._teams = value;
    }
    resetTeams() {
        this._teams = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get teamsInput() {
        return this._teams;
    }
    get users() {
        return cdktf.Fn.tolist(this.getListAttribute('users'));
    }
    set users(value) {
        this._users = value;
    }
    resetUsers() {
        this._users = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usersInput() {
        return this._users;
    }
}
exports.BranchProtectionV3RestrictionsOutputReference = BranchProtectionV3RestrictionsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
BranchProtectionV3RestrictionsOutputReference[_d] = { fqn: "@cdktf/provider-github.branchProtectionV3.BranchProtectionV3RestrictionsOutputReference", version: "12.0.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/branch_protection_v3 github_branch_protection_v3}
*/
class BranchProtectionV3 extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a BranchProtectionV3 resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the BranchProtectionV3 to import
    * @param importFromId The id of the existing BranchProtectionV3 that should be imported. Refer to the {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/branch_protection_v3#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the BranchProtectionV3 to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "github_branch_protection_v3", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/branch_protection_v3 github_branch_protection_v3} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BranchProtectionV3Config
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'github_branch_protection_v3',
            terraformGeneratorMetadata: {
                providerName: 'github',
                providerVersion: '5.40.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // required_pull_request_reviews - computed: false, optional: true, required: false
        this._requiredPullRequestReviews = new BranchProtectionV3RequiredPullRequestReviewsOutputReference(this, "required_pull_request_reviews");
        // required_status_checks - computed: false, optional: true, required: false
        this._requiredStatusChecks = new BranchProtectionV3RequiredStatusChecksOutputReference(this, "required_status_checks");
        // restrictions - computed: false, optional: true, required: false
        this._restrictions = new BranchProtectionV3RestrictionsOutputReference(this, "restrictions");
        this._branch = config.branch;
        this._enforceAdmins = config.enforceAdmins;
        this._id = config.id;
        this._repository = config.repository;
        this._requireConversationResolution = config.requireConversationResolution;
        this._requireSignedCommits = config.requireSignedCommits;
        this._requiredPullRequestReviews.internalValue = config.requiredPullRequestReviews;
        this._requiredStatusChecks.internalValue = config.requiredStatusChecks;
        this._restrictions.internalValue = config.restrictions;
    }
    get branch() {
        return this.getStringAttribute('branch');
    }
    set branch(value) {
        this._branch = value;
    }
    // Temporarily expose input value. Use with caution.
    get branchInput() {
        return this._branch;
    }
    get enforceAdmins() {
        return this.getBooleanAttribute('enforce_admins');
    }
    set enforceAdmins(value) {
        this._enforceAdmins = value;
    }
    resetEnforceAdmins() {
        this._enforceAdmins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enforceAdminsInput() {
        return this._enforceAdmins;
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get repository() {
        return this.getStringAttribute('repository');
    }
    set repository(value) {
        this._repository = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryInput() {
        return this._repository;
    }
    get requireConversationResolution() {
        return this.getBooleanAttribute('require_conversation_resolution');
    }
    set requireConversationResolution(value) {
        this._requireConversationResolution = value;
    }
    resetRequireConversationResolution() {
        this._requireConversationResolution = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireConversationResolutionInput() {
        return this._requireConversationResolution;
    }
    get requireSignedCommits() {
        return this.getBooleanAttribute('require_signed_commits');
    }
    set requireSignedCommits(value) {
        this._requireSignedCommits = value;
    }
    resetRequireSignedCommits() {
        this._requireSignedCommits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireSignedCommitsInput() {
        return this._requireSignedCommits;
    }
    get requiredPullRequestReviews() {
        return this._requiredPullRequestReviews;
    }
    putRequiredPullRequestReviews(value) {
        this._requiredPullRequestReviews.internalValue = value;
    }
    resetRequiredPullRequestReviews() {
        this._requiredPullRequestReviews.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredPullRequestReviewsInput() {
        return this._requiredPullRequestReviews.internalValue;
    }
    get requiredStatusChecks() {
        return this._requiredStatusChecks;
    }
    putRequiredStatusChecks(value) {
        this._requiredStatusChecks.internalValue = value;
    }
    resetRequiredStatusChecks() {
        this._requiredStatusChecks.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredStatusChecksInput() {
        return this._requiredStatusChecks.internalValue;
    }
    get restrictions() {
        return this._restrictions;
    }
    putRestrictions(value) {
        this._restrictions.internalValue = value;
    }
    resetRestrictions() {
        this._restrictions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restrictionsInput() {
        return this._restrictions.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            branch: cdktf.stringToTerraform(this._branch),
            enforce_admins: cdktf.booleanToTerraform(this._enforceAdmins),
            id: cdktf.stringToTerraform(this._id),
            repository: cdktf.stringToTerraform(this._repository),
            require_conversation_resolution: cdktf.booleanToTerraform(this._requireConversationResolution),
            require_signed_commits: cdktf.booleanToTerraform(this._requireSignedCommits),
            required_pull_request_reviews: branchProtectionV3RequiredPullRequestReviewsToTerraform(this._requiredPullRequestReviews.internalValue),
            required_status_checks: branchProtectionV3RequiredStatusChecksToTerraform(this._requiredStatusChecks.internalValue),
            restrictions: branchProtectionV3RestrictionsToTerraform(this._restrictions.internalValue),
        };
    }
}
exports.BranchProtectionV3 = BranchProtectionV3;
_e = JSII_RTTI_SYMBOL_1;
BranchProtectionV3[_e] = { fqn: "@cdktf/provider-github.branchProtectionV3.BranchProtectionV3", version: "12.0.0" };
// =================
// STATIC PROPERTIES
// =================
BranchProtectionV3.tfResourceType = "github_branch_protection_v3";
//# sourceMappingURL=data:application/json;base64,