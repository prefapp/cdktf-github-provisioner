"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BranchProtection = exports.BranchProtectionRequiredStatusChecksList = exports.BranchProtectionRequiredStatusChecksOutputReference = exports.branchProtectionRequiredStatusChecksToTerraform = exports.BranchProtectionRequiredPullRequestReviewsList = exports.BranchProtectionRequiredPullRequestReviewsOutputReference = exports.branchProtectionRequiredPullRequestReviewsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function branchProtectionRequiredPullRequestReviewsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dismiss_stale_reviews: cdktf.booleanToTerraform(struct.dismissStaleReviews),
        dismissal_restrictions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.dismissalRestrictions),
        pull_request_bypassers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.pullRequestBypassers),
        require_code_owner_reviews: cdktf.booleanToTerraform(struct.requireCodeOwnerReviews),
        require_last_push_approval: cdktf.booleanToTerraform(struct.requireLastPushApproval),
        required_approving_review_count: cdktf.numberToTerraform(struct.requiredApprovingReviewCount),
        restrict_dismissals: cdktf.booleanToTerraform(struct.restrictDismissals),
    };
}
exports.branchProtectionRequiredPullRequestReviewsToTerraform = branchProtectionRequiredPullRequestReviewsToTerraform;
class BranchProtectionRequiredPullRequestReviewsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dismissStaleReviews !== undefined) {
            hasAnyValues = true;
            internalValueResult.dismissStaleReviews = this._dismissStaleReviews;
        }
        if (this._dismissalRestrictions !== undefined) {
            hasAnyValues = true;
            internalValueResult.dismissalRestrictions = this._dismissalRestrictions;
        }
        if (this._pullRequestBypassers !== undefined) {
            hasAnyValues = true;
            internalValueResult.pullRequestBypassers = this._pullRequestBypassers;
        }
        if (this._requireCodeOwnerReviews !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireCodeOwnerReviews = this._requireCodeOwnerReviews;
        }
        if (this._requireLastPushApproval !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireLastPushApproval = this._requireLastPushApproval;
        }
        if (this._requiredApprovingReviewCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.requiredApprovingReviewCount = this._requiredApprovingReviewCount;
        }
        if (this._restrictDismissals !== undefined) {
            hasAnyValues = true;
            internalValueResult.restrictDismissals = this._restrictDismissals;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._dismissStaleReviews = undefined;
            this._dismissalRestrictions = undefined;
            this._pullRequestBypassers = undefined;
            this._requireCodeOwnerReviews = undefined;
            this._requireLastPushApproval = undefined;
            this._requiredApprovingReviewCount = undefined;
            this._restrictDismissals = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._dismissStaleReviews = value.dismissStaleReviews;
            this._dismissalRestrictions = value.dismissalRestrictions;
            this._pullRequestBypassers = value.pullRequestBypassers;
            this._requireCodeOwnerReviews = value.requireCodeOwnerReviews;
            this._requireLastPushApproval = value.requireLastPushApproval;
            this._requiredApprovingReviewCount = value.requiredApprovingReviewCount;
            this._restrictDismissals = value.restrictDismissals;
        }
    }
    get dismissStaleReviews() {
        return this.getBooleanAttribute('dismiss_stale_reviews');
    }
    set dismissStaleReviews(value) {
        this._dismissStaleReviews = value;
    }
    resetDismissStaleReviews() {
        this._dismissStaleReviews = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dismissStaleReviewsInput() {
        return this._dismissStaleReviews;
    }
    get dismissalRestrictions() {
        return cdktf.Fn.tolist(this.getListAttribute('dismissal_restrictions'));
    }
    set dismissalRestrictions(value) {
        this._dismissalRestrictions = value;
    }
    resetDismissalRestrictions() {
        this._dismissalRestrictions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dismissalRestrictionsInput() {
        return this._dismissalRestrictions;
    }
    get pullRequestBypassers() {
        return cdktf.Fn.tolist(this.getListAttribute('pull_request_bypassers'));
    }
    set pullRequestBypassers(value) {
        this._pullRequestBypassers = value;
    }
    resetPullRequestBypassers() {
        this._pullRequestBypassers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pullRequestBypassersInput() {
        return this._pullRequestBypassers;
    }
    get requireCodeOwnerReviews() {
        return this.getBooleanAttribute('require_code_owner_reviews');
    }
    set requireCodeOwnerReviews(value) {
        this._requireCodeOwnerReviews = value;
    }
    resetRequireCodeOwnerReviews() {
        this._requireCodeOwnerReviews = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireCodeOwnerReviewsInput() {
        return this._requireCodeOwnerReviews;
    }
    get requireLastPushApproval() {
        return this.getBooleanAttribute('require_last_push_approval');
    }
    set requireLastPushApproval(value) {
        this._requireLastPushApproval = value;
    }
    resetRequireLastPushApproval() {
        this._requireLastPushApproval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireLastPushApprovalInput() {
        return this._requireLastPushApproval;
    }
    get requiredApprovingReviewCount() {
        return this.getNumberAttribute('required_approving_review_count');
    }
    set requiredApprovingReviewCount(value) {
        this._requiredApprovingReviewCount = value;
    }
    resetRequiredApprovingReviewCount() {
        this._requiredApprovingReviewCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredApprovingReviewCountInput() {
        return this._requiredApprovingReviewCount;
    }
    get restrictDismissals() {
        return this.getBooleanAttribute('restrict_dismissals');
    }
    set restrictDismissals(value) {
        this._restrictDismissals = value;
    }
    resetRestrictDismissals() {
        this._restrictDismissals = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restrictDismissalsInput() {
        return this._restrictDismissals;
    }
}
exports.BranchProtectionRequiredPullRequestReviewsOutputReference = BranchProtectionRequiredPullRequestReviewsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
BranchProtectionRequiredPullRequestReviewsOutputReference[_a] = { fqn: "@cdktf/provider-github.branchProtection.BranchProtectionRequiredPullRequestReviewsOutputReference", version: "12.0.0" };
class BranchProtectionRequiredPullRequestReviewsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BranchProtectionRequiredPullRequestReviewsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BranchProtectionRequiredPullRequestReviewsList = BranchProtectionRequiredPullRequestReviewsList;
_b = JSII_RTTI_SYMBOL_1;
BranchProtectionRequiredPullRequestReviewsList[_b] = { fqn: "@cdktf/provider-github.branchProtection.BranchProtectionRequiredPullRequestReviewsList", version: "12.0.0" };
function branchProtectionRequiredStatusChecksToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        contexts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.contexts),
        strict: cdktf.booleanToTerraform(struct.strict),
    };
}
exports.branchProtectionRequiredStatusChecksToTerraform = branchProtectionRequiredStatusChecksToTerraform;
class BranchProtectionRequiredStatusChecksOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._contexts !== undefined) {
            hasAnyValues = true;
            internalValueResult.contexts = this._contexts;
        }
        if (this._strict !== undefined) {
            hasAnyValues = true;
            internalValueResult.strict = this._strict;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._contexts = undefined;
            this._strict = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._contexts = value.contexts;
            this._strict = value.strict;
        }
    }
    get contexts() {
        return cdktf.Fn.tolist(this.getListAttribute('contexts'));
    }
    set contexts(value) {
        this._contexts = value;
    }
    resetContexts() {
        this._contexts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contextsInput() {
        return this._contexts;
    }
    get strict() {
        return this.getBooleanAttribute('strict');
    }
    set strict(value) {
        this._strict = value;
    }
    resetStrict() {
        this._strict = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strictInput() {
        return this._strict;
    }
}
exports.BranchProtectionRequiredStatusChecksOutputReference = BranchProtectionRequiredStatusChecksOutputReference;
_c = JSII_RTTI_SYMBOL_1;
BranchProtectionRequiredStatusChecksOutputReference[_c] = { fqn: "@cdktf/provider-github.branchProtection.BranchProtectionRequiredStatusChecksOutputReference", version: "12.0.0" };
class BranchProtectionRequiredStatusChecksList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BranchProtectionRequiredStatusChecksOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BranchProtectionRequiredStatusChecksList = BranchProtectionRequiredStatusChecksList;
_d = JSII_RTTI_SYMBOL_1;
BranchProtectionRequiredStatusChecksList[_d] = { fqn: "@cdktf/provider-github.branchProtection.BranchProtectionRequiredStatusChecksList", version: "12.0.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/branch_protection github_branch_protection}
*/
class BranchProtection extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a BranchProtection resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the BranchProtection to import
    * @param importFromId The id of the existing BranchProtection that should be imported. Refer to the {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/branch_protection#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the BranchProtection to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "github_branch_protection", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/branch_protection github_branch_protection} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BranchProtectionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'github_branch_protection',
            terraformGeneratorMetadata: {
                providerName: 'github',
                providerVersion: '5.40.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // required_pull_request_reviews - computed: false, optional: true, required: false
        this._requiredPullRequestReviews = new BranchProtectionRequiredPullRequestReviewsList(this, "required_pull_request_reviews", false);
        // required_status_checks - computed: false, optional: true, required: false
        this._requiredStatusChecks = new BranchProtectionRequiredStatusChecksList(this, "required_status_checks", false);
        this._allowsDeletions = config.allowsDeletions;
        this._allowsForcePushes = config.allowsForcePushes;
        this._blocksCreations = config.blocksCreations;
        this._enforceAdmins = config.enforceAdmins;
        this._forcePushBypassers = config.forcePushBypassers;
        this._id = config.id;
        this._lockBranch = config.lockBranch;
        this._pattern = config.pattern;
        this._pushRestrictions = config.pushRestrictions;
        this._repositoryId = config.repositoryId;
        this._requireConversationResolution = config.requireConversationResolution;
        this._requireSignedCommits = config.requireSignedCommits;
        this._requiredLinearHistory = config.requiredLinearHistory;
        this._requiredPullRequestReviews.internalValue = config.requiredPullRequestReviews;
        this._requiredStatusChecks.internalValue = config.requiredStatusChecks;
    }
    get allowsDeletions() {
        return this.getBooleanAttribute('allows_deletions');
    }
    set allowsDeletions(value) {
        this._allowsDeletions = value;
    }
    resetAllowsDeletions() {
        this._allowsDeletions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowsDeletionsInput() {
        return this._allowsDeletions;
    }
    get allowsForcePushes() {
        return this.getBooleanAttribute('allows_force_pushes');
    }
    set allowsForcePushes(value) {
        this._allowsForcePushes = value;
    }
    resetAllowsForcePushes() {
        this._allowsForcePushes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowsForcePushesInput() {
        return this._allowsForcePushes;
    }
    get blocksCreations() {
        return this.getBooleanAttribute('blocks_creations');
    }
    set blocksCreations(value) {
        this._blocksCreations = value;
    }
    resetBlocksCreations() {
        this._blocksCreations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blocksCreationsInput() {
        return this._blocksCreations;
    }
    get enforceAdmins() {
        return this.getBooleanAttribute('enforce_admins');
    }
    set enforceAdmins(value) {
        this._enforceAdmins = value;
    }
    resetEnforceAdmins() {
        this._enforceAdmins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enforceAdminsInput() {
        return this._enforceAdmins;
    }
    get forcePushBypassers() {
        return cdktf.Fn.tolist(this.getListAttribute('force_push_bypassers'));
    }
    set forcePushBypassers(value) {
        this._forcePushBypassers = value;
    }
    resetForcePushBypassers() {
        this._forcePushBypassers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forcePushBypassersInput() {
        return this._forcePushBypassers;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get lockBranch() {
        return this.getBooleanAttribute('lock_branch');
    }
    set lockBranch(value) {
        this._lockBranch = value;
    }
    resetLockBranch() {
        this._lockBranch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lockBranchInput() {
        return this._lockBranch;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
    get pushRestrictions() {
        return cdktf.Fn.tolist(this.getListAttribute('push_restrictions'));
    }
    set pushRestrictions(value) {
        this._pushRestrictions = value;
    }
    resetPushRestrictions() {
        this._pushRestrictions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pushRestrictionsInput() {
        return this._pushRestrictions;
    }
    get repositoryId() {
        return this.getStringAttribute('repository_id');
    }
    set repositoryId(value) {
        this._repositoryId = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryIdInput() {
        return this._repositoryId;
    }
    get requireConversationResolution() {
        return this.getBooleanAttribute('require_conversation_resolution');
    }
    set requireConversationResolution(value) {
        this._requireConversationResolution = value;
    }
    resetRequireConversationResolution() {
        this._requireConversationResolution = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireConversationResolutionInput() {
        return this._requireConversationResolution;
    }
    get requireSignedCommits() {
        return this.getBooleanAttribute('require_signed_commits');
    }
    set requireSignedCommits(value) {
        this._requireSignedCommits = value;
    }
    resetRequireSignedCommits() {
        this._requireSignedCommits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireSignedCommitsInput() {
        return this._requireSignedCommits;
    }
    get requiredLinearHistory() {
        return this.getBooleanAttribute('required_linear_history');
    }
    set requiredLinearHistory(value) {
        this._requiredLinearHistory = value;
    }
    resetRequiredLinearHistory() {
        this._requiredLinearHistory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredLinearHistoryInput() {
        return this._requiredLinearHistory;
    }
    get requiredPullRequestReviews() {
        return this._requiredPullRequestReviews;
    }
    putRequiredPullRequestReviews(value) {
        this._requiredPullRequestReviews.internalValue = value;
    }
    resetRequiredPullRequestReviews() {
        this._requiredPullRequestReviews.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredPullRequestReviewsInput() {
        return this._requiredPullRequestReviews.internalValue;
    }
    get requiredStatusChecks() {
        return this._requiredStatusChecks;
    }
    putRequiredStatusChecks(value) {
        this._requiredStatusChecks.internalValue = value;
    }
    resetRequiredStatusChecks() {
        this._requiredStatusChecks.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredStatusChecksInput() {
        return this._requiredStatusChecks.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allows_deletions: cdktf.booleanToTerraform(this._allowsDeletions),
            allows_force_pushes: cdktf.booleanToTerraform(this._allowsForcePushes),
            blocks_creations: cdktf.booleanToTerraform(this._blocksCreations),
            enforce_admins: cdktf.booleanToTerraform(this._enforceAdmins),
            force_push_bypassers: cdktf.listMapper(cdktf.stringToTerraform, false)(this._forcePushBypassers),
            id: cdktf.stringToTerraform(this._id),
            lock_branch: cdktf.booleanToTerraform(this._lockBranch),
            pattern: cdktf.stringToTerraform(this._pattern),
            push_restrictions: cdktf.listMapper(cdktf.stringToTerraform, false)(this._pushRestrictions),
            repository_id: cdktf.stringToTerraform(this._repositoryId),
            require_conversation_resolution: cdktf.booleanToTerraform(this._requireConversationResolution),
            require_signed_commits: cdktf.booleanToTerraform(this._requireSignedCommits),
            required_linear_history: cdktf.booleanToTerraform(this._requiredLinearHistory),
            required_pull_request_reviews: cdktf.listMapper(branchProtectionRequiredPullRequestReviewsToTerraform, true)(this._requiredPullRequestReviews.internalValue),
            required_status_checks: cdktf.listMapper(branchProtectionRequiredStatusChecksToTerraform, true)(this._requiredStatusChecks.internalValue),
        };
    }
}
exports.BranchProtection = BranchProtection;
_e = JSII_RTTI_SYMBOL_1;
BranchProtection[_e] = { fqn: "@cdktf/provider-github.branchProtection.BranchProtection", version: "12.0.0" };
// =================
// STATIC PROPERTIES
// =================
BranchProtection.tfResourceType = "github_branch_protection";
//# sourceMappingURL=data:application/json;base64,