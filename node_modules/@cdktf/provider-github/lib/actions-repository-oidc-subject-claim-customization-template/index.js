"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionsRepositoryOidcSubjectClaimCustomizationTemplate = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/actions_repository_oidc_subject_claim_customization_template github_actions_repository_oidc_subject_claim_customization_template}
*/
class ActionsRepositoryOidcSubjectClaimCustomizationTemplate extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ActionsRepositoryOidcSubjectClaimCustomizationTemplate resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ActionsRepositoryOidcSubjectClaimCustomizationTemplate to import
    * @param importFromId The id of the existing ActionsRepositoryOidcSubjectClaimCustomizationTemplate that should be imported. Refer to the {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/actions_repository_oidc_subject_claim_customization_template#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ActionsRepositoryOidcSubjectClaimCustomizationTemplate to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "github_actions_repository_oidc_subject_claim_customization_template", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/integrations/github/5.40.0/docs/resources/actions_repository_oidc_subject_claim_customization_template github_actions_repository_oidc_subject_claim_customization_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ActionsRepositoryOidcSubjectClaimCustomizationTemplateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'github_actions_repository_oidc_subject_claim_customization_template',
            terraformGeneratorMetadata: {
                providerName: 'github',
                providerVersion: '5.40.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._id = config.id;
        this._includeClaimKeys = config.includeClaimKeys;
        this._repository = config.repository;
        this._useDefault = config.useDefault;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get includeClaimKeys() {
        return this.getListAttribute('include_claim_keys');
    }
    set includeClaimKeys(value) {
        this._includeClaimKeys = value;
    }
    resetIncludeClaimKeys() {
        this._includeClaimKeys = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeClaimKeysInput() {
        return this._includeClaimKeys;
    }
    get repository() {
        return this.getStringAttribute('repository');
    }
    set repository(value) {
        this._repository = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryInput() {
        return this._repository;
    }
    get useDefault() {
        return this.getBooleanAttribute('use_default');
    }
    set useDefault(value) {
        this._useDefault = value;
    }
    // Temporarily expose input value. Use with caution.
    get useDefaultInput() {
        return this._useDefault;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            include_claim_keys: cdktf.listMapper(cdktf.stringToTerraform, false)(this._includeClaimKeys),
            repository: cdktf.stringToTerraform(this._repository),
            use_default: cdktf.booleanToTerraform(this._useDefault),
        };
    }
}
exports.ActionsRepositoryOidcSubjectClaimCustomizationTemplate = ActionsRepositoryOidcSubjectClaimCustomizationTemplate;
_a = JSII_RTTI_SYMBOL_1;
ActionsRepositoryOidcSubjectClaimCustomizationTemplate[_a] = { fqn: "@cdktf/provider-github.actionsRepositoryOidcSubjectClaimCustomizationTemplate.ActionsRepositoryOidcSubjectClaimCustomizationTemplate", version: "12.0.0" };
// =================
// STATIC PROPERTIES
// =================
ActionsRepositoryOidcSubjectClaimCustomizationTemplate.tfResourceType = "github_actions_repository_oidc_subject_claim_customization_template";
//# sourceMappingURL=data:application/json;base64,